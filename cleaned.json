{"about the general questions category":["[Replace this first paragraph with a short description of your new category. This guidance will appear in the category selection area, so try to keep it below 200 characters. Until you edit this text or create topics, this category won't appear on the categories page.]  Use the following paragraphs for a longer description, as well as to establish any category guidelines or rules.  Some things to consider in any discussion replies below:   What is this category for? Why should people select this category for their topic? How is this different than the other categories we already have? Do we need this category? Should we merge this with another category, or split it into more categories?"],"mapquest setting up reduce function":["Trying to set up my reduce for mapQuest, and it's not working how I'm expecting it to. I know I'd need to do something with my new array to get rid of  new opposite directions  but I thought the code below should  at least remoce the redundancies in the first array. From my thinking: reduce is looking at the current value and the previous values, and only if they are not opposites does it add it to the total array. However, I'm getting error messages like the one attached, there is some incrementer thing going on. Would appreciate any guidance!function mapQuest(directions) {  function isOpposite(currentValue, previousValue) {     let valueArray = [previousValue, currentValue]     return valueArray.includes('N' &amp;&amp; 'S') || valueArray.includes('E' &amp;&amp; 'W') }  return directions.reduce(function(total, currentValue, previousValue){             ///if the previous value and the current value are not opposites, only              ///then do we want to add them to the array              if (isOpposite(currentValue, previousValue)) {return total}             else {             total.push(previousValue)             total.push(currentValue)                 return total             }  }, [])  }  Error message: Expected [ 0, 'N', 1, 'N', 2, 'E', 6, 'E', 8, 'N', 9, 'N', 12, 'E' ] to equal [ 'N', 'N', 'W', 'S', 'E' ].","Hi Kevin,The MDN docs will steer you right on this one: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceNote the third parameter that gets passed to .reduce()'s callback function. It's always going to be the index of the current item in the array that your reduce function is iterating over. So on the first run-through, it's going to be 0, then 1, then 2, etc.  That should get you in the right direction.Now, to get the value of the previous slot in the array, note that the 4th parameter you can pass to reduce's callback will be the source array. So with a call like:  arr.reduce( (total, current, index, sourceArr) // sourceArr is the same as arr  ...you can can reach \"previousValue\" instead using sourceArr[index-1]. Remember to account for edge cases.  -Ziv","Ziv's answer was very helpful for understanding how to access the previous element of the array using reduce.  Additionally, you are going to have issues with your isOpposite function. When you write valueArray.includes('N' &amp;&amp; 'S'), that isn't saying what you think it is. That will actually first evaluate the expression 'N' &amp;&amp; 'S' which will evaluate to true. Then it will see if valueArray.includes(true), which it won't.  In order to properly check if currentValue and previousValue are opposites, you would need to do one of the following:  /* Make sure that both 'N' and 'S' exist in valueArray */ let valueArray = [previousValue, currentValue] ['N','S'].every(dir =&gt; valueArray.includes(dir))  /****** OR ********/ return (previousValue === 'N' &amp;&amp; currentValue === 'S') ||            (previousValue === 'S' &amp;&amp; currentValue === 'N')  /****** OR ********/ const opposites = {     N: 'S',     S: 'N', };  return opposites[previousValue] === currentValue;"],"using apply with null as an argument":["I'm looking through the documentation regarding the use of .apply(). After reading MDN, I still have some confusion about the appropriate use of null as an argument.The solution code for complement function that reads:  function complement(func) {  return function ( ) {       return !func.apply(null, arguments) }  }","Hey Sara, that's a really good question.  The real use case for .call() and .apply() is to modify the context (this) of a function when it's called and to pass arguments to the function. So, for instance:  function logInfo(age, height) {     console.log(`Name: ${this.name}, Age: ${age}, Height: ${height}`); }  logInfo.call({ name: 'Jimmy' }, 74, 60); // Will log 'Name: Jimmy, Age: 74, Height: 60' logInfo.call({ name: 'Jenny' }, 50, 69); // Will log 'Name: Jenny, Age: 50, Height: 69'  logInfo.apply({ name: 'Jimmy' }, [74, 60]); // Will log 'Name: Jimmy, Age: 74, Height: 60' logInfo.apply({ name: 'Jenny' }, [50, 69]); // Will log 'Name: Jenny, Age: 50, Height: 69'  As you can see, both .call() and .apply() can be used for the same purposes. They both set the context (this) of the function and offer a way to pass additional arguments. The only difference between the two is how additional arguments are passed. With .call(), they are passed as normal arguments, with .apply(), they are passed as an array.  In this next example, it doesn't matter what we pass as the this argument to .call() or .apply() because the function doesn't ever reference a this.  function logInfo(age, height) {     console.log(`Age: ${age}, Height: ${height}`); }  logInfo.call({ name: 'Jimmy' }, 74, 60); // Will log 'Age: 74, Height: 60' logInfo.apply(null, [74, 60]); // Will log 'Age: 74, Height: 60'  So, to finally get around to answering your question...  The function returned from complement just needs a simple way to pass all of its arguments along to func. It does that by hijacking the functionality of .apply(). .apply() is perfect for this scenario because, unlike .call(), it can pass an unlimited number of arguments to the function in a single array (the arguments object). And the reason it passes null as the context (this) is because the func doesn't care what its context (this) is. If the func doesn't ever reference this, then it doesn't matter what is passed at the first argument to .apply(). You could have passed anything there and it wouldn't have made a difference."],"question about multiple maps solution spoilers":["struggled with multiple maps for a long time. After looking at the solution, one of the things that was tripping me up was that I was first looping through the array of objects, then doing my for of loop. The solution below has you go right into the for of loop on the second array after you map over the first array. Can someone walk me through what's going on here? It seems to me that they wouldn't be ale to look at the individual objects in the array without first isolating those objects. Basically, it seems to me like we're doing a for of loop over an array, and it shouldn't be able to get at the values we need yet.   Solution:   function multipleMaps(input, maps) {    return input.map(function(key){        for (let map of maps) {            if(key in map) {                return map[key]            }        }        return key    })}","To start with, let's use the examples given in the problem to assert that maps is expecting an array of objects, such as   [   { a: 0 },   { b: 1, c: 2 },   { d: 3 } ]  and inputs is an array of the properties we want to extract from those objects. input will be an array representing keys/properties we want to pull from those objects in map. To think about the solution, I want to clarify that it’s not that you loop the maps array after you map over the first array, it’s while..map() will, in this case, iterate over every item of input, and pass the current item to the callback function declared inside its argument list. In this case, the callback is the anonymous function that begins after .map( and ends on the second-to-last line, and the current item is referenced inside that callback with key.   The for…of is inside the callback function, so it'll be run on every item inside the input array. Remember that these items are all going to be the properties we reference in the objects stored in maps. The loop then runs through each object in maps (e.g., { a: 0} in my example above) and, ifkey` is the name of a property in that object, it returns the value associated with that property. Otherwise, it simply returns the property.  Sorry, that was a lot, but I hope it explains what's going on. Let me know if you have any further questions.","Below is my solution and it passed. One of the things that is confusing me about the TestFirst solution is that the key is being matched but it's not accounting for the fact that there are different types (string and number) in the different test cases. In my solution I needed to turn the value being mapped into a string to account for that and then match it to each property in the object.  const multipleMaps = (arr, maps) =&gt; { return arr.map(val =&gt; { for (let item of maps) {   for (let prop in item) {     if (val.toString() === prop) {       return item[prop];     }   } } });  };"],"function expressions hoisting best practices":["A quick question about best practices moving forward with es6 syntax - especially when we start creating apps and sites.  Let's say we are making an app and we have 3 functions. The functions call to each other and cascade downwards:  function getRandomUser() {addData()}  function addData(){updateDOM()}  function updateDOM(){  }  In this case we get data on the user, send the user data to the addData function to store it, and then transmit data to appear on the DOM via the updateDOM function.  However, using es6 syntax it would flow in the opposite direction because we can't call function expressions before they are defined as they are not hoisted.  const updateDOM = () =&gt; {  }  const addUser = () =&gt; {updateDOM()}  const getRandomUser = () =&gt; {addData()}  Is this a matter of preference? Is there certain use cases for one over the other? Is it generally best practice to use functions expressions over declarations?   If anyone has any input I'd be curious to hear!","This can really be a matter of preference.  The important part is that you understand the differences between the two, in case they are the source of a bug.  Some companies will have a style guide that leans more towards function expressions vs declarations, or vice versa."],"running testem and receiving failures":["Hey guys, I have been running testem and receiving failures with testem saying my answers are returning undefined, however when I open the console the correct answers to each question are loaded. This continues to happen even when I refresh the page. Just wondering if anyone has experienced this and if I should be worried that there is something wrong with my code execution, or if this is just a jasmine/testem site error?","Nevermind, I realized I was returning my answers with console.log(), which testem does not accept, rather than using return. Once I made the switch it worked and all my answers passed."],"foundations part 3 call site execution context":["I'm a little confused about the meaning of the first sentence here.  \"When you invoke or call a function, the function creates its own. The execution context is a record of information of code executing such as where it's called (where the code is on the call stack), how the function was invoked, its Scope Chain, the value of this, and more!\"  Is it suggesting that it's creating it's own execution context? Or does \"creates its own\" refer to something else that I'm not understanding.","Hi Sara,You are correct with your first assertion: when a function is called, its own execution context is created. This context records various details about the function, as outlined in the rest of the explanation you cited above. Hope that clarifies things.  -Ziv"],"expected return value of an expression":["In Foundations Part 3 re 'this', there was a code example that returned an expression. From what MDN says, the return statement ends function execution and specifies a value to be returned to the function caller. How is this method/function able to return an expression (this.power = 'on') instead of a value? Thanks!    Code belowconst tvRemote = {    on: function() {        return this.power = \"on\";    },    off: function() {        return this.power = \"off\";    },    power: \"off\"};  tvRemote.on.call({power:\"off\", size:\"60-inch\"});","Hi Tiffany,Good question! This one trips me up from time to time, too. Note that a single equals sign (=) is an assignment operator, not a comparison operator. So what's happening at the end of the .on() method is that we are assigning the value \"on\" to this.power, and then we are returning that new value of this.power: \"on\".  Point of interest: if we were looking at this.power === 'on', this would still be OK. That expression would evaluate to either a true or false value depending on the current value of this.power, and then the return statement would return that value.  Hope that clarifies things!  -Ziv","Thanks for explaining!"],"quite study room needed":["Quite study room needed  I am an upcoming student for the Fullstack immersive software engineering program. My cohort starts at Jan 13. I wonder if I can use the campus as a study room after Junior Phrase ends before Senior Phase starts, or even after Senior Phase ends while I am job searching. I need a quite place to study but unfortunately there is construction going on outside my apartment.   Also if there is any recommendations of quite study place I would appreciate it a whole lot. I am willing to pay for the place.","I don’t know about Fullstack, but I know the NYPL at 53st next to the MOMA is a nice place to study and it is free.  Just be aware of the open time.","Thanks! I saw that it opens at 11, but I would rather go earlier like 9 am. I can find other NYPL which opens earlier. Anyone who is interested in finding a study mate to go to libraries together?","I'm also in the cohort starting Jan 13th. I thought campus is open between phases but maybe someone  can confirm this?  Both the upper west side NYPL on 81st and Amsterdam and the Bryant Park NYPL open at 10AM. Rose Reading room at Bryant Park NYPL is super quiet. I'm not sure if any of the libraries open at 9AM.  The Atrium at Lincoln Center is pretty quiet and open around 8AM and has bathrooms and free wifi.   I think there's a private library on the upper east side as well for a fee...the New York Society Library maybe?","I am interested to go to libraries or else where to study together.","Thanks a lot! I will use Bryant park NYPL as my main study room then, thanks a lot!","Cool. I'd be interested in group study too. I have some office space now but it's not conducive to group study at all. It's been awhile since I visited Bryant Park NYPL but I think there are rooms available for groups.   Did you get any more information regarding the availability of campus after each phase?","I don’t know about the availability of the campus after each phases. But I am totally  up to group study in NYPL, help me stay disciplined!","Hello, I'm in the same cohort as well. I'd love to join a study group. I'm sure we can find a suitable location, if not on campus. Let's link up after the course begins next week and talk more about times and location.   Looking forward to it!","Hi,  I'm down for a study group also.  See you guys next week.","I checked out the Rose Room at the Bryant Park NYPL today. It opens at 10AM and it is a massive room...for quiet whispered study.  However, there's a room across the hall that's great for groups and collaboration. Plenty of tables, bathrooms, wifi, and some electrical outlets. There's a side entrance to the library that opens either at 8 or 9 and there are some small pockets of rooms with tables.   I'm up for group study also, whether it's here or somewhere else more central to wherever everyone else is.    See you all next week!"],"testfirst review error in fiilter test specs":["Sorry if someone's already brought this up, but just in case anyone was having trouble with the TestFirst review specs—specifically failing the .forEach() call-through spec on the 'fiilter' problem—I think there's a mistake on line 37 of the test specs: it's checking that the .forEach() method was called, but then calls the 'filter' method on an array instead of the 'fiilter' method, so the spec will fail even if you've written your code correctly. Just thought I'd point this out so that no one else puzzles over the spec for too long like I did.","no, there are no errors in specs. They asked you to use forEach method and check for condition to filter some values instead of filter method","You're totally right! It calls .filter instead of .fiilter. Nice catch! There was also an error in the .maap specs that @Tyler_Eaden caught.","@Ari_Korotkin thanks for the heads up! Here is a link to the version I updated yesterday, it should already have a fix for this and any other specs in the exercise.  As @Katt_Baum mentioned, @Tyler_Eaden found a few of the errors the other day, here is a link to the post so you can review them in case your version of the exercise has more (I suggest copy and pasting the new test specs from the link I provided). Sorry for the trouble!"],"confusion with hoisting":["Screen Shot 2019-12-19 at 2.00.27 PM.png1073x231 38.1 KB   Can anyone explain to me which this would return undefined?I understand the basics of hoisting like how declarations are hoisted but not the assignments and how function declarations are hoisted in its entirety. But I don't know exactly how to break apart this code with all the weird parentheses.","Hi Jason.  Nice question - is this example from MDN?  I can comment that the parens surrounding the function allow for the IFFE  to work without an error being thrown.   You probably have this following part down but I'll leave this here anyway.I'm thinking the function (including its code block) is hoisted as expected.  Then within the function's execution context, the 'var x' declaration (but NOT x's assignment) is hoisted.  That's why you get 'undefined' as the value that is being console.logged.   If you comment out var x = 'inner scope' you will see that x becomes 'outer scope' which just shows that the function is looking within its own context first before moving up the so called scope chain.","The main trick here is using var. All var variables are doing hoisting. So it means that you second var inside this function is hoisting too. So what happens here is something like that:  var x; x = 'outer scope'; var x; ... your function  So by using var second time even inside your function you re-assigned it to undefined","Thanks for the explanations, everyone. I never learned what IFFE was so I didn't even understand the code, but messing around with taking out the var x inside the function now, I understand how it works better now.  Also, I found that example in http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified   Said that if I didn't know it was gonna be undefined I couldn't keep reading so I freaked"],"tostring call val vs val tostring":["I need help understanding the difference between calling toString.call(val) vs val.toString():   toString.call(null) -- I get [object Null]null.toString();-- I get error \"Uncaught TypeError: Cannot read property 'toString' of null\"  toString.call([12,3])-- I get [object Array]-- I get \"12,3\"","The difference between these two lies in the fact that each type of thing (Array, number, object) will implement its own custom version of toString. So, Array.prototype.toString() will join the array elements with a comma. But the Object toString will just spit out [object Object].  By doing toString.call(val), you are using a function that works like the Object.toString() function, meaning that it will spit out something like [object Array] when you call it with an array. By doing arr.toString(), you are using Array.prototype.toString() which is custom designed to handle arrays which is why you get a better output.  The reason that you are getting the error with null.toString is because null doesn't have any properties or prototype chain on it, so you can't call methods or access properties off of null.  This is a lot of info, so if any of this is confusing, just let me know."],"symmetricdiff spec 4 failing even though my code is calling difference":["Hi,  here is my code for symmetricDiff:  const symmetricDiff = (a, b) =&gt; [...difference(a, b), ...difference(b, a)];  It passes all specs except \"calls the difference function\"... even though it appears that the code does call difference( )  Can someone explain this?    here is the entire code, including my difference func:  const difference = (a, b) =&gt; a.filter(e =&gt; !b.includes(e));  const symmetricDiff = (a, b) =&gt; [...difference(a, b), ...difference(b, a)];","@Timothy_Long great question!  Here are comments in the solution file:  /*   the difference function is pre-declared so it is recognized by the test specs. The last spec in symmetricDiff checks to see that difference is called.  If difference is defined using an assignment expression (with let or const) it is not accessible on the \"window\" object which is where the jasmine `spyOn` function checks for the `difference` function.  Feel free to change the names of the  parameters, but if you want your specs to pass keep the function// declaration syntax.  */  The difference function needs to be defined with the function keyword for the test specs to be able to access the function correctly. Outside of the test specs not being able to access the function, there isn't a difference in behavior if you were to define the function with a function expression vs a function declaration. You will learn more about the reasoning behind this when you start writing your own test specs in the Junior Phase, but if you want to dive deeper into the topic feel free to direct message me!"],"checkpoint grades":["Hi all! Just wondering... has anyone received their grade for the first checkpoint yet? It still says pending under my profile and there are no comments on my code in git. Thanks!","Hi Katt I was wondering the same I haven't received a grade for the first checkpoint either - hopefully soon!","Hi Katt,  I got mine last Thursday. It should be under your account tab.","Hi Katt,I got my first checkpoint grade also. Yes,it should under your account tab and below the setting. Did you take the checkpoint late?","@Yan_Gao @CHAOHUI_CHENYeah, I have checked my account but it says grade pending. I submitted it on Tuesday last week.  Screen Shot 2019-12-18 at 10.12.03 AM.png1015x369 24.8 KB    @Joshua_AvonOk! Atleast I'm not the only one!","@Katt_Baum @Joshua_Avon  I think I saw somewhere that sometimes the platform can be affected by cookies - maybe try opening it in an incognito window and see if your grade loads?","Looks like they posted mine this morning thanks all for the help!","Thanks! Along with @Joshua_Avon, they posted mine this morning.","How can i get to this page?","On learn.fullstackacademy.com, there is an icon for your account information in the upper right corner. When you click on it, there will be a menu item that says Grades underneath. They also provide instructions with pictures.","Thank you! Got it. I was looking for in in Checkpoint section in menu"],"checkpoint submission":["Hi everyone, I'm trying to submit my first checkpoint work in my github using  $git add -A$git commit -m 'completed exercises'$git push origin master  but it's not working   can anyone help me how I can solve this so i can push them into my repository?   thanks in advance!","it seems like you need to switch to the default shell 'zsh' run the code 'chsh -s /bin/zsh' and push again?","Thanks for the comment but still having issues..","taking a stab here, but do you have a separate directory/folder for checkpoint? I pushed from checkpoint-pt-1 directory  this is mine... Screen Shot 2019-12-12 at 7.32.52 PM.png1134x708 61.8 KB","Where is your project directory? Can you do pwd in terminal?Also make sure u did git clone from your forked repo and NOT from fullstack repo","Following what Dmytro said; you are in your home directory. So, when you run git add . you are attempting to add your entire home directory to your git repository.Once you navigate to the correct directory and run the git commands you should be good.You can use ls to list directory contents, and cd ${directory} to change directory"],"used git commit without m":["image.png1713x1798 67.4 KB   I am stuck on this page because I forgot to use the flag -m and add a message. I tried typing a message anywhere it allowed the cursor to move but don't know how to save that message. I get no response with Control + C, Q, or Control + D. How can I return to the regular command line page without killing iterm?","I had the same thing happen to me more than a few times. Here's what you do:    Press the i key on your keyboard to go into INSERT mode (you should see the word \"INSERT\" at the bottom of your terminal) Enter the message you intended to put Press the esc key on your keyboard Enter \":wq\" and then press Enter   That will add a message to your commit.  Alternatively, if you just want to exit without inserting a message:    Press Control + C (it looks like it doesn't do anything but you should see this message at the bottom of your terminal : \"Type  :qa!  and press Enter to abandon all changes and exit Vim\"  Enter \":qa!\" and then press Enter     Hope this helps!","Further to Erick's comprehensive reply, I'd add that what you're looking at is VIM editor, if you want to read more about it.   You can also change your default git message editor by updating your git config. Replace \"code\" with your editor of choice:    git config --global core.editor \"code\"","Sometimes it is better to do git commit, without the -m. It lets you look more at what you're committing and think more about what your commit message is going to be."],"fsa 2001 jan 2020 immersive codewars clan":["Hello Everyone in FSA-2001 (January 2020 Immersive),    Who is on Codewars?     Going along with previous FSA cohort convention, I found it appropriate to initiate a Codewars clan for the Jan 2020 Immersive. The clan name is FSA-2001. To join simply go to your Codewars Account Settings and enter 'FSA-2001' in the 'Clan (Company, School or Organization)' field and click UPDATE at the bottom.    I look forward to meeting everyone!","Hey @Timothy_Long - Great idea and I love the initiative! In the junior phase, you will also be invited to a Codewars clan for your cohort! Codewars is a great place for extra practice.","Me there! User DmyroL","DMYTRO_LYPOVETSKIY: DmyroL  I'm also there alexanderywang. Do you collaborate on the site? I've only used it for practicing.  What can we do as a clan?","No, i do not collaborate and as far as i know, you can do nothing with clans"],"checkpoint coding challenge submission":["For the checkpoint coding challenge, I can use \"git commit -m \"complete\"\" and then \"git push origin master\" to push my code to my remote repository. Does my remote repository have to be \"Public\" in order to be graded?  Screen Shot 2019-12-06 at 1.53.02 PM.png930x640 38.6 KB","Hi Tianxin, happy Friday Testfirst repos won't be graded -- the checkpoint assessment (which we do grade) will be released on Monday at 11am.  As for the question:   Does my remote repository have to be \"Public\" in order to be graded?  Since your checkpoint repo will be forked from Fullstack Academy's main account, we will be able to access any \"private\" forks, so no worries about setting it public!"],"vs code output where are you":["Trying to see the results of console.log() inside VS Code without moving over to Chrome Dev. I keep having to reload Chrome and locate the correct source file. The \"Output \" tab in VS Code is blank even when I should have logged output. The only extensions I can find seem to only have advanced output properties: I really just want to be able to see Hello World from console.log('Hello World\") somewhere.  Any tips?","Hi Shelby,  As an option you could install \"Code Runner\" extension. Then you just select code you want to run and press \"Control + Alt + N\". You'll see console.logged result in output.","If you want to do so without the Code Runner extension, you can go into the debugger (Ctrl+Shift+D) and run the debugger."],"where can i find course dates":["Where can I find course dates? I am wondering if we will have any days off at Thanksgiving?","Hi Celia!  The full academic calendar won't be available in LearnDot until your cohort is on campus after Foundations, but these are the holidays for the 1911 cohorts in 2019:   No class on 11/28-29.  No class 12/21-1/12.   If you have any specific days in mind that you're concerned about, feel free to PM me or email foundations@fullstackacademy.com!","Thank you for your help!"],"slack integration":["Is anyone else getting a message when they login to learn dot telling them to integrate Slack?  I am and when I try to integrate Slack it tells me I don't have permission to do that.  *insert shrugging shoulders emoji here*","Yeah, i think everybody's having the same problem","",""],"slack linking error you re not authorized to install learndot on fullstack academy":["When I ttied to link my learn dot account to Slack I received the following notification: \"You’re not authorized to install Learndot on Fullstack Academy.Learndot is restricted for this workspace. Please reach out to one of your App Managers if you’d like additional information or to ask them to install this app.\"","I am getting that as well.",""],"info on immersive":["Has anyone else gotten info on the immersive yet? It's supposed to start Monday and I have yet to hear anything from Fullstack.","I got an email around 1pm today with information about Monday.","I got an email as well","I got an invitation yesterday to an asana checklist, and this morning I got an invitation to the slack channel. No email besides these, though the asana checklist references a welcome email??   I'm a little glad to hear that someone else is also looking for more info.","I haven't received anything yet.","I haven't received anything, either!","This was my experience as well.","I got the Asana email as well!","Same here, I've received only the Asana &amp; Slack invite emails."],"course access after thursday":["Hi guys. Does anyone know if we will still have access to the materials after Thursday?","Absolutely! You'll have access to the course material for life"],"foundations policies quiz":["I just noticed that my quiz was never graded -- is this an error?","mine too. may be they dont grade it."],"testreview solutions":["Hi everyone, I think I missed the link to the TestFirst Review V2 solutions. Where can I find them?  Thanks!Kate","Here you go https://github.com/FullstackAcademy/foundations-solutions/tree/master/TestFirst-Review","Thank you, I appreciate it!"],"safari js console vs chrome js console question":["Hi so I personally use Safari as my default browser so I typically open up the testem environment in Safari and use the JS console there since it auto opens from VS Code. I was wondering if there is a difference between the two, all I have found on the web about this is differences in rendering engines (WebKit vs Chrome V8). Thanks in advance!","Hi Josh!   As far as using the console for running testem, I wouldn't worry about which browser you're using. As long as you have access to a console and can see the logs/errors you need, you're good! It's all up to personal preference. I personally prefer to use Chrome as I find their console and developer tools more user friendly than Safari. Once you get into Web App/DOM parts of Fullstack, I find that Chrome has more robust tools for DOM inspection, but again, just a preference","Thanks ill try to use Chrome more but trying to avoid making it my default browser (boooo google ) so we will see how successful I am"],"first checkpoint feedback":["Hi!  I was just wondering when we would get our grades/feedback on our first checkpoint.  Thank you!  Gundeep Kohli","Hi Gundeep,  If you go to Learn Dot and click on your circular profile picture, a menu with a link to 'Grades' will drop down. Click that to find your grades.  You can read the notes on your code by going to your Github repository for Checkpoint-1. You'll notice new changes committed there.  Hope that helps!  Sincerely,Martha","@Martha_Syryca thank you!","Is there a way to know your actual number grade as opposed to just pass or fail?","I don't see a grades tab under my profile. Is this maybe because I was given an extension on the first checkpoint and it hasn't been graded yet?","Hey Kenneth! We don't release numerical grades for the first two checkpoints, but I would nonetheless recommend reviewing the comments left on the checkpoint as well as the solutions provided.","Hi Ethan -- Likely the extension was the cause of the delay. I would check your learn dot profile now; the grade is now posted."],"is help desk open tonight":["For this evening's help desk (6/4), will there be someone taking questions?  As always, really appreciate all the mentors' help during these sessions.","Ditto!  Is it open tonight?","Help desk has been opened, we're all set!  thank you"],"will solutions be provided for checkpoint1":["When should we anticipate our grades for Checkpoint1?  Also, will solution videos be provided?","I just noticed I had comments/feedback on my github directly but no official grade","I see comments/feedback on my GitHub as well, and it says I passed.","I haven't checked out my GitHub yet, but if you click on your profile link in Learndot, there should a \"Grades\" link right under \"Settings\". I see a link for the Checkpoint 1 solutions there along with a comment on your grade.","Nobody will get the exact percentage scored; nevertheless, you might've seen feedback from your mentor.   Remember, 'this' score is 12.5% of your overall score.   The final is a whopping 75% of your overall score as it's all cumulative.  BTW,  the \"this\" word has been ruined for me.","Hey all, mentor here.   The checkpoint grades are given back as pass/fail. You should be getting this grade within 48 of the checkpoint closing. This info can be found under \"grades\" when you click you avatar in LearnDot. Also, there are no solution videos for the checkpoints, but a solutions gist should be provided for you to look over. If you haven't gotten either of these, definitely reach out!","I'd like to vote and petition that video solutions be provided for all checkpoints. They've been part of the TestFirst solutions, why stop now? These videos are exceedingly helpful.","Just reporting nothing has been added to my 'grades' section in learnDot, nor have any comments, etc. been added to my Checkpoint1 github repo","Tom, You may have to click on the panel that says, Foundations CH Part 1. It will then turn into a darker shade of gray.   Hope this helps!","My grade still says 'pending' under that panel. I saw the grader comments, though. Since it's been over 48 hours since the checkpoint closed, should I be reaching out to someone?","This did help! I just assumed wrongly, I appreciate this Martha!  -Tom","Hi Yuting, Mentor here, but I'm not the one who did your grading. I just re-sent your grade, you should be able to see it now in the grades panel, like Martha pointed out. Let us know if you have any problems seeing it!"],"about the system setup category":["Post Questions relating to System Errors or Productivity Tips!","I installed ESLint, but it is only showing me red-underlined errors, and not the green-underlined warnings (like when a variable is defined and not used).  Is there something I missed?"],"issues adding testfirst review repository to machine":["I'm baffled because I've had no trouble creating local repositories at all until now! I though I added successfully the first time, but when I ran ls on my folder the directory wasn't there.   I tried adding it again, but then got 'error: failed to push some refs to 'https://github.com/clairemuscat/TestFirst-Review-V2.git'. But when I tried adding one more time, I got the error \"fatal: remote origin already exists.\"  Does anyone have an idea of where this repository is? It says it exists but I can't find it on my machine and it looks like it had trouble pushing in the first place.   Thanks!","Hi Claire,If you are having trouble finding the repository on your machine you can use finder to search for \"TestFirst-Review\". Once you have found the folder open in your terminal and type \"git remote -v\". This will show you where the origin is mapped to.  It should be this:  'https://github.com/clairemuscat/TestFirst-Review-V2.git'. If there isn't one you can type \"git remote add origin https://github.com/clairemuscat/TestFirst-Review-V2.git\". This will set your origin to your repository. If you need to set a new origin you can type \"git remote set-url origin https://github.com/clairemuscat/TestFirst-Review-V2.git\"  If all that seems too confusing, you can delete the repository from your github and start fresh. Go to the repository Test-First-Review page on your github and then the settings tab. Scroll all the way down to the delete repository button(screenshot below). It will ask you some questions that look scary and make you put in your password. If you haven't done work on it yet, it's not a big deal because you can then just fork and clone in a place on your machine you know where it is and everything should then be mapped how you want it. See the screen shot below that will show where the delete this repository button is located.   Let us know if you still have questions here or in the help desk.    Screen Shot 2020-02-13 at 9.14.33 AM.png820x525 36.5 KB"],"testem error specs not loading":["Hi all,  I'm having trouble with test'em in my browser. It has worked as expected through the first two checkpoints and workshops, but last night it stopped loading. It looks like this: Screen Shot 2020-02-11 at 11.54.13 AM.png3580x2032 148 KB   The page won't allow me to open the console either. As of now I can't run any tests, so help would be greatly appreciated.  Thanks!","Hi Jonah,   That happened to me before. Check if you have a loop that is not reaching an end in your code.   If thats the case, comment out that code and re-run testem in a different tab.","Thanks Angie! I changed my code and testem is working again. I didn't have an infinite loop but I was using the || operator a lot which I don't normally do, not sure if that had something to do with it! In any case I appreciate the help.","Awesome!!! No problem. Happy to help!"],"ropedude npm test error":["Hi all! I am trying to run npm test after installing npm in the Rope-Dude file, however, I am getting error. Before the error message the link of the testem links to the TestFirst-Part-2 testem page not to the Rope-Dude problem.  I'm not sure what's wrong cause there was no problem when I installed and tested TestFirst Part 1 and 2. Can anyone help me figure out this?   스크린샷 2020-02-05 오후 3.34.32.png1476x1226 81.3 KB","i think it fails because you didn't complete exercise. Did you try to open the link port 7357?","Hi Yourhee,Did you make sure to stop the server on Test First part 2 using CTRL C? Make sure you have done that, close all windows that are open on to localhost:7357 and try running testem again.  Also, a side note when you install testem with the -g that is installing it globally on your machine. That means you should be able to run testem without reinstalling on your machine.","Hi Ashton, oh yes you are right.. I forgot to stop the Test First part 2..Thank you very much!!"],"cannot clone checkpoint 1 repository to machine invalid username password":["Getting error messages when trying to clone checkpoint 1 into my terminal and am getting the following error message:  Cloning into 'foundations-checkpoint-pt-1'...Username for 'https://github.com': mhammer708mhammer708@github.com':remote: Invalid username or password.fatal: Authentication failed for 'https://github.com/mhammer708/foundations-checkpoint-pt-1/'mhammer708@LAPTOP-HOJH2J0K:~/Desktop$      I tried resetting my password, but I am still getting this error. Any suggestions would be appreciated!","hmm I made a personal access token and was able to enter, but is this the only way to fix this moving forward?"],"is eslint required on machine for final checkpoint":["Dear mentors,   Is having ESLint set up on our machine required in order to complete the final checkpoint? I still haven't set it up on my machine yet and am hesitant to try to set it up before I take the final checkpoint in case it causes any unexpected machine set up issues for me. My current setup works fine. If ESLint is not required at this stage, I'll set it up after I take the final checkpoint.  Thanks,Mallory","That's a good question. I have it set up, but I disable it, cause it underlines everything and is very distracting, very hard to look at your code with yellow and red lines everywhere","Hey Mallory - Great question. ESLint is NOT required for anything in Foundations. It's a nice to have but it is not a necessity. You will go through a more intensive and hands on machine setup process during your junior phase. I hope this helps!","Thanks Scott for confirming! Noted.","I remember seeing a page about how to set up eslint with a Fullstack style guide, but I can't find that anymore.","Hey Joshua - It isn't required. It is a \"nice to have\" but not a necessity for any of the content in foundations.","sure! I just like doing things the right way.  Right now if I type eslint --init I can get up a version of eslint based on the Airbnb style guide, but to actually use it I ended up putting in alot of /*es-lint ignore .... */ at the top of the file as it was getting very opinionated about things that I didn't want to worry about.  I'd like to configure eslint so that it initializes in a way that is good for the course.","@Joshua_Skootsky here is a link to the config repository, the directions are in the README.md file, enjoy!","Okay, thanks!  I remember running the npm install commands, and being confused about why that didn't install the peer dependencies for babel-eslint and others, and why installing things like babel-eslint on its own didn't resolve that problem.  I am running into the same problem again now:  $ npm install -g eslint eslint-config-fullstack eslint-plugin-react babel-eslint /usr/local/Cellar/node/12.10.0/bin/eslint -&gt; /usr/local/Cellar/node/12.10.0/lib/node_modules/eslint/bin/eslint.js npm WARN eslint-config-fullstack@6.0.0 requires a peer of eslint@^5.0.1 but none is installed. You must install peer dependencies yourself. npm WARN eslint-config-fullstack@6.0.0 requires a peer of babel-eslint@^8.2.6 but none is installed. You must install peer dependencies yourself.","Hey Joshua - After reviewing the errors you received I see the problem. You need to install specific versions of eslint and the other dependencies since eslint has recently been updated to a major release (currently it is in 6.0, but the eslint-config-fullstack supports 5.0)  Uninstall your global installations and run the following:   npm install -g eslint@5.0.1 eslint-config-fullstack eslint-plugin-react@7.10.0 babel-eslint@8.2.6  Let me know how this goes!"],"installing n with the curl command isnt working":["Screen Shot 2019-06-24 at 2.51.12 PM.png2880x1800 1.36 MB   Hi, I tried using the curl command to install n. I get past the Xcode installation popup and it tells me that I already have the binaries installed...  I also included my echo $PATH below the error. Scott's videos don't show what to do here (even his video regarding correcting my $PATH variable, but he accesses a file called .bash_profile, of which I do not have).  Help!  EDIT: I fixed it. Turns out that the Overview lesson had instructed me to install npm, yet in this particular lesson Scott had not had npm installed, and so npm and n were able to be installed together via the curl command. I HIGHLY RECOMMEND NOT INSTALLING NPM UNTIL YOU ARE GOING TO USE THE CURL LINK!  Thanks,Rob","I'm curious on the advantages of installing n directly from the repo versus using homebrew $ brew install n to install?   I (like in the video) did a fresh install of MacOS, but managed to have the same error.  I ended up using:  $ brew install n $ sudo n lts  I see in the video n in installed locally versus globally. Is this going to cause problems down the road?  Thanks!","This resolved my issue. Many thanks!","@Robert_Schnek  how were you able to fix your issue?  I get the same error.","This post ended up being how i installed nBut it broke my global installations.","Hi, I am experiencing the same issueHere's my $PATH: PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbinI do not have a .bash_profile.  My n, npm and testem are all located here : ls /usr/local/lib/node_modules/n   npm\ttestem  Can someone please help me? I had node and npm already installed as I attended bootcamp prep."],"installing and checking testem":["Hi! Sorry if this question doesn't make sense    On 'Foundation Part 1' &gt; '3. Machine Setup' &gt; 'Check if Your Machine is Ready'   I received an EACCES Error in my terminal. I followed the youtube video in the description: https://www.youtube.com/watch?time_continue=278&amp;v=bxvybxYFq2o  I was able to follow everything up until 4:37. When the video at 4:37 mentions to refresh the variables how do I go about doing that? My terminal has been stuck on the following image below:    Thank you!","To exit VIM:    escape key  the colon : key q (or qw for \"quit and write\") enter   I've heard of people having that question in a technical interview. \"How do you exit from VIM?\"  To refresh the profile variables, exit the terminal and open a new one. Possibly running the command bash will also do that. (But running the bash command actually starts a new session within the current session.)","You can also run source ~/.bash_profile instead of opening a new terminal window","I'll bend over backwards to use nano.","Hi, I also have the same issue. after trying ESC :qw enter, I get a red error on the lower left hand cornerE492: Not an editor command: qw","nevermind. got it to work with :wq"],"error with npm install":["Hi,I wasn't able to download testem globally so I used npm install and npm test for TestFirst.I wanted to practice forking, cloning and npm test with the bootcamp-prep repository before the checkpoint, but now I am receiving the following error when trying npm install: Screen Shot 2019-10-07 at 2.51.54 PM.png1318x438 61 KB   If someone can please help because I need to take the checkpoint soon Thank you in advance!!","Hi Sarah,  Are you in the directory for the TestFirst repo? From the error messages, it appears you are in the directory sarah, and it's looking for a file called package.json, which tells it what npm dependencies to install for that project. That package.json file will be in all repositories for foundations. Try the command pwd to see if you are in the right directory. It will print your current directory.","I'm in the correct directory now and it's working. Thanks Erin!"],"unsure if testem is working or if i am just making a lot of mistakes example with 06 q 1":["Hi team! This is probably pretty late to be posting about this but I'm honestly very confused about whether my Testem is working or whether I am just riding that steep coding learning curve.   So the problem is that Testem does respond to some questions and give me those lovely green circles, but with other questions I won't be able to get something really basic to come up green, even after I've written and run the program and seen that the outcome looks (to me) like what I think the question is asking for it to be.   I'll use the example of the first problem in 06-functios-and-closure:   The first test spec is:    image.png1082x168 24.4 KB   Whatever else may be wrong with it I'm confused why my code (see below:     ) isn't passing the first spec and is instead receiving the following error from Testem:   image.png1550x522 117 KB   Am I making a super basic mistake and not seeing it?   To me it seems like what I have would pass at least that part of the test.   Any help would be appreciated!","Hi Emma,  Your code looks 100% correct. The only thing that comes to mind.. don't you forget to save the .js file before checking specs in browser?","Hmm I just double checked and I've definitely been saving! I do have some test specs that are passing for various questions but still many, including that one, are not!    Thank you for the reassurance that it is probably (?) not my code, Viachaslau!","Hi Emma,  Your error, ReferenceError: concatString is not defined, means that your spec file is unable to locate your function definition. Have you written concatString in the .js file provided in the repo?   If you're unable to find a solution before tomorrow evening, I would consider coming to help desk hours so a mentor can troubleshoot with you"],"my path variable doesnt look right":["Hi all, I have an oddly specific issue with my PATH variable. I discovered that the n command (while installing node and npm) isn't in my PATH and that my username doesn't appear in the path either. Instead, I have \"ImageMagick\"? I thought that maybe I could change it with my bash_profile but that didn't work. I'm worried that this will cause problems in the future. If anyone knows how I can fix this, I would greatly appreciate your help! Thanks!   My PATH Variable:  Screen Shot 2019-09-28 at 7.19.31 PM.png1632x178 52.6 KB   My Bash Profile:  Screen Shot 2019-09-28 at 7.27.21 PM.png1274x824 47.1 KB","Hello Ariana,  As far as ImageMagick being included in your PATH environment variable goes-- that shouldn't be a problem. The PATH variable is just something that your computer will use to look for executable files. Any executable file that exists in the directories in your PATH variable (delimited by colons) can run without calling the full directory name (e.g. I can run python by typing \"python\" instead of \"/usr/local/python\" in my terminal). Whenever you add something to your PATH variable (e.g. export PATH=${PATH}:/usr/local/bin/npm), you are just adding a new path to the end of the existing PATH variable.  In your .bash_profile, the two export statements are commented out (the # at the start of the line), so that part of the script never runs. You shouldn't need to add those lines as part of your bash profile-- you can just run that export command (without the #) from your terminal.","Now I understand. Thank you so much!"],"eslintrc json not showing up":["Hi,  So I believe I installed the latest version of ESLint (I believe) and got the error messages that some people on here were talking about:  Screen Shot 2019-08-14 at 10.00.30 AM.png1454x726 111 KB   I tried troubleshooting it by downloading 5.0.1, and turning VS off and on again. I continued to try to make a eslintrc.json file Screen Shot 2019-08-14 at 10.01.44 AM.png886x132 21.7 KB  but not sure if the file was even created, or just hidden somewhere. Frankly, not sure if I might have an error in the downloading of esLint or making the eslintrc.json file","Hey Matthew,  It looks like your .eslintrc.json file was created properly. The specific error you received in your terminal is \"`bash: code: command not found\". If you didn't already, you need to enable the code command to open VSCode from your terminal. Here is a thread that talked about this from earlier this week.  You can check if the .eslinrc.json file was created by running the ls -a command in your home directory. The -a flag lists all files, including \"dot\" files. Dot files are generally used by your OS, programs, etc and have their own use cases but most often they help with configuration (which is what you are trying to do with eslint.  Check the version eslint your machine with this command:  eslint -v    If you get a different version, let me know and we can step through how to enable v5.0.1.","Hi Matthew!  Definitely follow Scott's instructions above on how to install the \"code\" command. Once you get that working, keep in mind that accessing files from the terminal is case sensitive, including punctuation. Running code eslintrc.json won't open the file you're seeking because you need that proceeding . before the file name. You'll want to run code .eslintrc.json when the code command is all set up.    Please reach out here or the HelpDesk tonight if you need any assistance!","Hi and good afternoon, Just a quick question. I started getting this error message in VS Code and was wondering what might be the best way to remedy it?'ESLint: Failed to load config \"fullstack\" to extend from. Referenced from: /Users/vanessamauna/.eslintrc.json. Please see the 'ESLint' output channel for details.'  Thank you!"],"connect local and remote repository problem":["Hello, I was trying to pushing an existing repository on my computer to my GitHub account, but I got error says \"Could not read from remote repository\". And my local repository was cleaned up somehow after I continued connecting. I attached the codes from my terminal below. Please help me find out what went wrong and how I can make it right. Thank you.","It seems that your public SSH key is not matching with the SSH key in your github account. Maybe try to push it using HTTPS or re-register your SSH key with github.","And your working tree should be clean if you already committed all changes. Type git log to see what changes you have committed.","@Cissy_Bai I checked your GitHub account for a \"Practice\" repository and couldn't find one. Did you create it? Is it private? I was going to provide you the HTTPS link as @Hector_DelaRosa suggested.","Hi Scott, yes I made it private. The problem is resolved. Thank you.",""],"exploring git problems":["I have Git installed. I can do most of the commands in the Exploring Git section, but I can't open text in VS Code (also installed). It says -bash code: command not found. I get the same error when I try to commit the file.","Did you try completely restarting your terminal (Command + Q) after installing?","Did you just \"have you tried turning it on and off again\" me!?  Seriously, though, I hadn't tried that, yet. I just did and I'm still getting the same error.","Hi, there  You're trying to use the \"code .\" command in the terminal to open your file in VS Code, correct? I want to make sure I'm understanding the problem correctly. If so, did you install the \"code\" command in PATH in VS Code?","That's right. And I guess I didn't. I must have missed that part of the setup.","I googled it and the directions say in VS Code to type Shell Command into the Command Palette, but that's coming up empty in VS Code when I do that.","Hi Nikko,  Check out this screenshot.  It's from the Toolbox section. Just as you select Shell Command: Install 'code' command in PATH when it appears under the search window, you'll notice a pop up message in the bottom right corner of your screen letting you know that the 'code' command has been installed in PATH.Once you restart your terminal, the code command should work.  code PATH.png2050x1378 306 KB","Right. When I type in \"Shell Command\" into the Command Palette, I don't get any options to choose from. It says \"No results found.\"","Hi Nikko, as per the second answer from this article, try typing \"&gt;\" before \"shell command\" in the Command Palette in VS Code. That did it for me.","That did it. And I see not that the \"&gt;\" is in the screen shot but not in the text. Thanks to everyone for the assistance!"],"eslint warnings":["Hello! When downloading ESLint, I received the following warnings. I proceeded with the instructions, but was wondering if I needed to do anything about these errors. Thanks!    image.png2006x354 62.5 KB Screen Shot 2019-06-25 at 2.34.42 PM","I received warnings, with some differences  Screen Shot 2019-06-25 at 2.45.55 PM.png1439x339 48.5 KB","Does eslint work in VSCode? You might see a message like this as you are typing code... Screen Shot 2019-06-25 at 00.24.54.jpg886x252 29.2 KB   I fixed it by installing locally (without the -g flag) and @Joshua_Hoeflich fixed it (I think) by installing an earlier version. See post: Newest eslint breaks...   I am not sure what the best solution is, but I think I'd try what is done in the other topic first.","Hi Neal! I never received that error actually in VS Code. Everything seems to be working fine so far. I was just curious to know if those errors will have any impact on any TestFirst assignments or future Checkpoints.","I saw both the warnings and this error. Unfortunately changing to an older version didn't seem to help. Removing the global flag resulted in more warnings in the terminal but ultimately fixed the error. Thanks for the suggestion!","What helped me here, personally, was uninstalling each of the eslint components, one by one:npm uninstall -g eslintnpm uninstall -g eslint-config-fullstacknpm uninstall -g eslint-plugin-reactnpm uninstall -g babel-eslintAnd then re-installing using the command found in Foundations Part 1 --&gt; Machine Setup --&gt; ESLint --&gt; Step 1:  ~ $ npm install -g eslint@5.0.1 eslint-config-fullstack eslint-plugin-react@7.10.0 babel-eslint@8.2.6","I am receiving the same error message in VSCode as @Neal_Dreher did in June, but I do still receive the outputs on the Problems tab: Screen Shot 2019-08-11 at 5.11.05 PM.png1336x798 174 KB   This error message can be distracting when working out the problems though, so I tried the following and defaulted back to Fullstack's original instructions if the attempt did not work:1. First, I attempted uninstalling and then reinstalling ESLint with the older version listed by @Joshua_Hoeflich. This did not work for me.2. Second, I attempted uninstalling and then reinstalling ESLint without the -g global flag. This also did not work for me.3. Third, but I do not believe this is the correct way to fix it, when I disabled the ESLint extension and then hit the Reload button in VSCode, the error message no longer popped up in VSCode: Screen Shot 2019-08-11 at 4.58.13 PM.png1338x803 139 KB   If I try reenabling ESLint, I get the same error message in VSCode. I don't believe ESLint is being properly configured with Fullstack's module since we received those warnings in the terminal on our first install, but I also do not know how we are supposed to fix it."],"newest eslint breaks eslint config fullstack":["Hey everyone!  The latest version of eslint breaks the eslint-config-fullstack plugin. I submitted an issue on Github documenting the problem.   If any of you are running into issues configuring your linter, you can temporarily work around this problem by running the following commands:  npm uninstall -g eslint (only necessary if you've installed the latest version of eslint already.)  npm install -g eslint@5.0.1 eslint-config-fullstack eslint-plugin-react babel-eslint  Everything should then work correctly.    On a different note, does anyone in Chicago want to meet up and study together for this week's checkpoint? My phone number is 847-513-1894. Feel free to text me; I'd love to work together!","I was absolutely convinced this was a version issue last night, but I wanted to look at it again today with fresh eyes.   Screen Shot 2019-06-25 at 00.25.54.jpg1514x508 126 KB   The error I was seeing in VSCode... Screen Shot 2019-06-25 at 00.24.54.jpg886x252 29.2 KB   I ended up installing locally and the error went away with the sample code I was using. If we need eslint installed globally, I can uninstall the local version and install eslint@5.0.1.","Joshua_Hoeflich: If any of you are running into issues configuring your linter, you can temporarily work around this problem by running the following commands:  I was trying to roll back the version of eslint but I didn't know which version to go to.  After trying your solution I still had an error complaining about the version of  babel-eslint.  I rolled that back to this version using  npm uninstall babel-eslintnpm install babel-eslint@8.2.6  Thank you for this post!","This topic was automatically closed 60 days after the last reply. New replies are no longer allowed."],"unable to instal testem operation not permitted":["Hi there!  I'm working through NPM's instructions on how to set up testem after receiving an EACCESS error, but am receiving the following error message when attempting to change permissions. How do I get past this?   Screen Shot 2019-06-25 at 6.42.15 PM.png1268x78 34 KB","Just wanted to follow up that this was fixed during help desk! sudo chown -R jacquelinezheng /usr/local doesn't work on Mojave - I had to run sudo chown -R $(whoami)",""],"testem install location not in path":["Installed testem using:   $ npm install testem -g  However I couldn't get it to work. I noticed the install loc was /usr/local/Cellar/node/12.4.0/bin/testem. This seems like an unusual place to install testem. To fix the problem, I created a link in the /usr/local/bin/ folder:  $ ln -s /usr/local/Cellar/node/12.4.0/bin/testem testem  This seems to have fixed the issue with launching testem.   1) Is this an acceptable way to fix the problem?  2) Looking at the video under 3. Machine Setup: Node &amp; NPM, I see:  Screen Shot 2019-06-25 at 01.05.27.jpg1706x146 60.3 KB    Why is the \"global\" installation folder under /Users/development-environment-setup/? How is $ testem executing in the first place, since ~/n/bin/ is not a part of the path? How is the system finding testem?","Hey Neal - How did you install node? based on the Cellar directory, I'm guessing you used Homebrew or used homebrew at some point since there is a strong association of the Cellar directory and homebrew (homebrew creates a cellar directory). (Maybe you used homebrew to install n?)   Yes, it is perfectly acceptable to create a symlink, great job! The location of the global install is altered as a result of using n. n creates its own directory (node_modules) which is where n installs global packages.   Further in the installation video, part 2 of your question is demonstrated, the $PATH is updated after installing n, here is a screenshot from the video of the new $PATH variable after the installation of n.   image.png1674x266 184 KB   Let us know if you have any other questions!","I created a log of everything I did after the MacOS reinstall. Based on the folder creation time, node was automatically installed when I installed xcode, homebrew and mpv. Guess I should have held off, but I listen to music using mpv."],"linux ubuntu 18 04 installing node and npm error related to unmet dependencies":["I currently have Linux Ubuntu 18.04 installed on my laptop.  I am trying to install Node and NPM using the terminal.    Based on documentation from Digital Ocean (https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04) I tried:   sudo apt install nodejs  But it is giving me unmet dependencies error.  Please see screen shot below:    node_npm_error.png1037x396 86.4 KB   I tried :   apt --fix-broken install   And I get the following error saying permission was denied:    root_question.png840x54 12.7 KB   Has anyone run into this problem?  Any suggestions for me would be greatly appreciated, thx.","Have you tried running the fix-broken with sudo? I don't run ubuntu, so I'm not sure how much I can help, but permission denied sounds like a case for sudo.  sudo apt --fix-broken install  Caitlin","Did you update your package manager before installing node? Using sudo apt update ?","Using below code worked:   sudo apt --fix-broken install   Thank you very much for the suggestion","If you're interested, here are the links to 2 articles on Medium I wrote about setting up a Linux dev environment for FSA:Complete Linux set-up Part 1  Complete Linux set-up - Part 2"],"are global npm installations necessary":["I have node and npm installed on my laptop.  However, my machine doesn't seem to allow me to install packages globally.  So when I type 'testem' in my terminal, I receive an error message \"testem: command not found\".  My workaround is to type \"npm test\" into terminal, and it gives the same output screen as \"testem\" would.  \"npm test\" runs all of the specs in TestFirst1.  This makes me hesitant to mess with my settings to install \"testem\" since \"npm test\" works just fine.  Should I just leave my computer as is since it's working even without \"testem\"?","I continued looking through the Foundations material, and it looks like we have the option to install \"testem\" globally or locally.","Hi Tae!   When you run npm test, it's actually running the testem command, but it's available locally in your repository as a \"devDependency\".   There seems to be some conflict in where your global npm packages are installed. Don't worry about it too much right now, just focus on completing the work in Test First, and use npm test for now. I recommend you visit the Helpdesk this week to try to resolve your global configuration issues.  One more thing, you can always run any global npm package with npx your_package_name_here, or in your case npx testem, which will temporarily download the package for single use.    Caitlin","Woah!  I typed \"npx testem\" in my terminal and it worked!!  I've never seen that command before.  Neat!","Nice, it's a newish feature, glad to hear that it's working! I usually npx everything in my dev life, as managing global installs can sometimes be a pain (especially when you're working with many different versions of Node).  Happy coding","I had a similar challenge and I was able to get it resolved, via Zoom, with the Help Desk.","I watched one of the videos and bit the bullet.  I backed up my Mac.  Then I went to usr/local directory.  I typed the 3 commands:     sudo chown -R  /usr/local/lib/node_modules/ sudo chown -R  /usr/local/bin/ sudo chown -R  /usr/local/share/   Now testem is working.  I have global permissions in these locations."],"problem with installing eslint":["Screen Shot 2019-05-06 at 8.00.45 PM.png1190x1099 130 KB Hi Everyone!  I ran into these errors when trying to install, and I have no idea what to do.  Any help would be really appreciated!","Hey Ding! I had the same issue when I was trying to install testem, and this link helped me a lot. I followed the instructions to reinstall npm with a node version manager, and it resolved my EACCES permission problems. Hope it works for you!","I tried, but it is showing the same EACCES error.","Ok this might sound silly, but have you tried closing your terminal and reopening it after installing nvm? I also had the same issue and thought it wasn't working after I installed nvm but when I cam back to it after closing my terminal it started working.","No, it is not silly at all, because it just fixed the problem. Thanks so much!","Awesome! So glad it worked!","Glad this issue was resolved! Restarting the terminal is a crucial step and one that I often forget","Hi!I had the same thing when I ran this the first time -   Mine was able to be resolved by putting 'sudo' at the begging of the command;   Note that it will prompt for your password when you use 'sudo'  Let me know if this helps!  -Tom"],"vs code code command not working":["Hi all,  I'm having some trouble using the 'code' command to launch a file in VS Code from the terminal. I successfully installed the code command in PATH, but when I type \"code\" + file in the command line, I get an error that says:   Fatal Python error: Py_Initialize: unable to load the file system codecModuleNotFoundError: No module named 'encodings'  Current thread 0x0000000115bdc5c0 (most recent call first):/usr/local/bin/code: line 10: ./MacOS/Electron: No such file or directory  Can anyone help me out with this? Thank you!  Best,Daniel","Hey Daniel,  Sorry to hear that this is giving you trouble! How did you go about adding the code command in your PATH? Did you try restarting your terminal before running the code command?   Unfortunately, this is a difficult thing to debug without walking through the process with you. If it's still giving you issues, I'd recommend using the help desk Tuesday from 6:45 - 9:45 on Tuesday (03/12). Feel free to post updates in the meantime and we can try to help you!","code.visualstudio.com             Running Visual Studio Code on macOS  Get Visual Studio Code up and running on Mac (macOS).                           open up VSC and follow the instructions there, it will add the code command to your shell!","Hi Gabriel,  I added the code command by hitting Command + shift + P while in VS code, and then typing and clicking \"Shell Command: Install 'code' command in PATH\". It says the install was successful. I restarted the terminal and it's still giving me this error.   It's not a huge deal because I can still open files in VS code manually, but I'll seek help at the help desk this week.   Thanks!","Hi, I use command + \"O\" on my mac to open up files in VSC. not sure if this addresses your question?","Hey there, just wanted to follow up with this question here for posterity:   I spoke with Daniel and this particular issue was that Python was still installed on the computer but was corrupted and throwing this error. The solution was to find the location that the Python installation was and remove that directory."],"testem is showing specs that arent in the spec js file":["the testem page in google chrome is showing this problem called shortand object syntax:   image.png1344x500 73.8 KB   I don't understand how this is even possible because I don't see any tests related to this in the object-properties-specs.js file.   I am sure that I have gone to the correct folder and have run testem on the exact folders that I have opened up in VS code. I even tried making an object \"dog\" and it did not update the testem page.","Hi Brandon,  I'm Jon, Mentor here at Fullstack.  So I have just looked at this myself, and it seems that inside of the '02-object-properties' directory, there is the 'object-properties.js' file as well as the 'object-properties-specs.js' file in the root of that directory. However, there is also a sub-directory within this one named 'object-syntax-practice', which itself has 'object-syntax.js' and 'object-syntax-specs.js'. They are separate spec and js files, hence why adding a 'dog' object to your code didn't update anything.  Since you're likely running testem from the '02-object-properties' directory, it will find both the specs at the root of '02-object-properties' as well as 'object-syntax-practice'. If you want to run the specs without the 'shortand object syntax' specs failing, open the 'object-syntax-specs.js' file and put an x in front of the describe block, e.g. 'xdescribe'. This will turn off the specs - you will still see them on your testem page in your browser, but they will neither pass nor fail. For future reference, you can do the same to individual test cases ('xit') as well.  Let me know if this helped! Cheers."],"jasmine spec prob":["Hello, jasmine is not running properly on my device. it is showing green dots and cross mark only rather then showing a spec details? where should i make my changes? please see my attachment as follows. Thanks. Screen Shot 2019-02-02 at 2.43.54 PM.png3358x1962 692 KB","@Jeetkumar_Desai normally when jasmine doesn't render all the HTML on the page, it is related to a bug in the solution file code.  When you started the specs, did everything display correctly?  I suggest visiting code you recently added, commenting it out (so it doesn't run) and check if jasmine renders the HTML correctly.","Actually, i opened allready solved folder.When i commetted out all the code in the solution file, it is showing all the specs perfectly! what should i do next?","when i checked all the files which i have solved allready. it is showing same error.","Is your code on Github so we can take a look?","yes, it is on github.","i tried on TestFirst-Part-1. which is availabe on the github account. i just changed my laptop today and install everything newly. and i took backup of my data on the usb pen drive. then, copied on the new laptop. so i thought that the file must be changed while i was copying. but i clone the same files from the github to check whether it is working or not? and it was the same error! may be i missed something to install? for the testing i have just installed testem only. i did not install anything other thing related jasmine may be. so for that i checked out the installation videos from the earlier section and i have done everything that was mentioned in that.","Resolved! i copied file from one laptop to another laptop. as a reason, i need to install node package manager again in that directory.Thanks"],"unmet peer dependency warning when installing eslint config fullstack":["Following the \"ESLint\" section of the \"3. Machine Setup\" section of the Foundations - Part 1 workshop, I ran:  sudo npm install -g eslint eslint-config-fullstack eslint-plugin-react babel-eslint  The command resulted in the output:   npm WARN deprecated circular-json@0.3.3: CircularJSON is in maintenance only, flatted is its successor./usr/local/bin/eslint -&gt; /usr/local/lib/node_modules/eslint/bin/eslint.js/usr/local/lib├── UNMET PEER DEPENDENCY babel-eslint@10.0.1├── eslint@5.12.1 ├── eslint-config-fullstack@6.0.0 └── eslint-plugin-react@7.12.4  npm WARN eslint-config-fullstack@6.0.0 requires a peer of babel-eslint@^8.2.6 but none was installed.   Not really a showstopping issue since I've been able to get ESLint to work locally in a project in the past, but I am wondering if anyone else is encountering the same warning and what the warning implies.  For the record, I am using Ubuntu 18.04 LTS and have not tried the command on any other machines yet.","I just found the solution herehttp://discuss.fullstackacademy.com/t/eslint-in-vsc-not-working/2694/2?source_topic_id=3840  hope that work for you too"],"using sudo every time for npm global modules installation":["For the \"3. Machine Setup\" section of the Foundations - Part 1 workshop, is there a reason when it doesn't recommend just using sudo every time one needs to install an npm package globally? Is it only for the convenience of not having to type sudo?  In particular, modifying the ownership of /usr/local/ and its contents seems like a big security risk.  The other suggestion of changing the directory in which global npm packages are installed to a user-specific directory is reasonable in my opinion, but I don't see how using sudo when installing global packages isn't a better idea most of the time.","@Brook_Li, that is the main reason. If you install testem with sudo, you'll need to run sudo testem everytime. But the bigger issue is when you install more global packages down the road, you will need to continually use sudo for all of them.  There are additional issues that can happen when using sudo to install everything as well.  I agree, it is a security risk! Keep in mind, we are creating our own local \"personal\" development environment. We aren't creating an environment to install and run node on a permanent host or server, if we were, we'd take more measures to keep the server and environment safe. I often use my own development environment for exploration, experimentation, and convenience.  I like the second suggestion you are referring to in npm documentation. If you install n, a version of this method is used (which is one of the reasons why we suggest using n to install node if you don't already have node installed).  Keep in mind, the main goal right now is to get your machine up and running, you will explore better approaches and learn a lot more about system configuration in your Junior and Senior phases!","Hi Scott, thank you for the quick reply, on a long weekend of all times.    Scott_D_Alessandro: If you install testem with sudo, you'll need to run sudo testem everytime.  I've actually been able to run testem without any issues and without using sudo after installing it with sudo. That is the behavior I see with most programs that I install globally: sudo is needed to install but not run.    Scott_D_Alessandro: There are additional issues that can happen when using sudo to install everything as well.  That is what I was really wondering about. After talking to a friend who finish the boot camp recently, he mentioned that nodemon might have issues if it is not owned by the same user as the nodejs programs it is running.    Scott_D_Alessandro: I like the second suggestion you are referring to in npm documentation. If you install n, a version of this method is used (which is one of the reasons why we suggest using n to install node if you don't already have node installed).  I was actually referring to the suggestion in the video to use npm config set prefix.  Edit: I looks like the ownership of the contents of /usr/local/lib/node_modules/ was set to my user by npm even though I didn't manually use chown on those contents. Perhaps that would explain why I'm not having problems with testem.  absreim@alpha4:/home$ ll /usr/local/lib/node_modules/ total 36 drwxr-xr-x 9 root   root    4096 Jan 19 13:55 ./ drwxr-xr-x 5 root   root    4096 Jun 11  2018 ../ drwxr-xr-x 4 nobody absreim 4096 Jan 19 13:55 babel-eslint/ drwxr-xr-x 3 nobody absreim 4096 Jun 11  2018 create-react-app/ drwxr-xr-x 7 nobody absreim 4096 Jan 19 13:55 eslint/ drwxr-xr-x 5 nobody absreim 4096 Jan 19 13:55 eslint-config-fullstack/ drwxr-xr-x 4 nobody absreim 4096 Jan 19 13:55 eslint-plugin-react/ drwxr-xr-x 5 nobody absreim 4096 Nov  3 13:14 snyk/ drwxr-xr-x 7 nobody absreim 4096 Jan 19 12:06 testem/","I was actually referring to the suggestion in the video to use npm config set prefix.  exactly! When installing n, it performs the npm config set prefix underneath the hood for you so you don't have to do it manually, it installs everything to a User/username/n directory.","Scott_D_Alessandro: exactly! When installing n, it performs the npm config set prefix underneath the hood for you so you don't have to do it manually, it installs everything to a User/username/n directory.  Good to know. Thanks. Everything is working fine for now with my current setup but n is looking like a very good option to consider."],"eslint installation warnings":["Hi all I was trying to install ESLint through my terminal. I followed the instruction here: https://eslint.org/docs/user-guide/getting-started and tried to install ESLint locally. But when I ran the commands in terminal, these warnings showed up:  Screen Shot 2018-12-13 at 2.18.11 PM.png1526x736 126 KB Did anyone else get these warnings? Do I need to do anything about them?","Rhea_Rao: ried to install ESLint  they should be fine. have you tried setting up the rest of eslint to see if it works yet?","Hi Rhea,   You don't need to worry about those logs, they're just warnings, not errors.    Caitlin"],"tweaking eslint configuration":["Hi, All,I'm having a usability issue with one of the properties set in my ESLint configuration. When the complexity gets too high, but is not yet an error, ESLint puts a squiggly yellow line under my code. I find it interferes with tracking all the indents. In which configuration file is the complexity property set, and how do I disable it?  Thanks!","you'll find a file called .eslintrc.json in your home directory that you can add rules to, such as disabling or tweaking configurations. Not 100% sure where the default configurations are being pulled from, but I know you can tweak them here.  Here's mine for example","Thanks, @Adam_Sisk!  I'll give it a try.","Here is some more info on the complexity rule and configurations available:        eslint.org             complexity - Rules  A pluggable and configurable linter tool for identifying and reporting on patterns in JavaScript. Maintain your code quality with ease.                           furthermore, I believe setting the value to 0 will disable the rule entirely.","It is possible to set \"complexity\": \"off\", and that worked for me.","I'd also like to tweak the configuration, but my .json file only includes this:  {     \"extends\": \"fullstack\" }  Where can I find the fullstack json?","@Sam_Apter Sam, if you'd like to change your configuration, you can add custom rules following the \"extends\" line. Remember to format with proper JSON, use double quotes everywhere and have no hanging comma's.       {         \"extends\": \"fullstack\",         \"rules\": {             \"indent\": [\"error\", 4],             \"quotes\": [\"error\", \"single\"],             \"semi\": [\"warning\", \"always\"]         }     }  See here https://eslint.org/docs/user-guide/configuring#extending-configuration-files for configuring tips, and here https://eslint.org/docs/rules/ for a list of configuration rules and their options",""],"testem installation issues":["Screen Shot 2018-12-08 at 2.54.21 PM.png698x133 18.4 KB   I have read through a lot of the other discussion topics regarding this and am unable to get testem to work properly. I have node installed.   Originally I couldn't get testem to even install because of an EACCES error but I followed another post by Mahia_Mutushy to get it installed but it will not run. I have attempted to use PATH=$PATH: but it will not run properly","Hi John,  Check out this article, specifically, option #2. You might need to set your path for you global npm installs to a different folder.           github.com             nodeschool/discussions  :school::speech_balloon: need help with nodeschool? or just wanna ask a question? open an issue on this repo! - nodeschool/discussions                           specifically, run this command:   npm config set prefix=$HOME/node  Then open up your .bash_profile or .bashrc file (depends on which one you have) and add this in there (be sure to not overwrite anything!)  export PATH=$HOME/node/bin:$PATH  Then, re-install testem globally and fingers crossed it should work.",""],"testem locations different in vscode vs iterm":["Hello! 'which testem' in vscode outputs /usr/local/bin/testem while 'which testem' in iterm outputs /Users/halimchu/.nvm/versions/node/v11.3.0/bin/testem  How can I put them in the same location?","Hi Halim,   It seems like your integrated terminal is using regular node instead of nvm. Feel free to message me in Discuss about correcting this, hopefully we can pair and work through it together! I'll do some research to see if I can find a solution for you!",""],"about the 08 recursion category":["Post Questions relating to the 08_Recursion Test Specs in Fullstack Test First"],"fibonacci recursive fibonacci calls itself recursively test failing":["Solution I used to fib: const priorFibbed=[1, 1];function fib(num){    if(priorFibbed[num]) return priorFibbed[num];    priorFibbed[num]=fib(num-1)+fib(num-2);    return priorFibbed[num];}This passes all tests except 'calls itself recursively', which claims fib is only called once for n=5.  Is there a clear reason that would be the case?","I copied your code into my visual studio and ran it against the specs. It looks like when the spec that is failing is isolated, it passes. It only fails when all the specs for the fib function run. I think the problem might be in your first line of code where you set priorFibbed = [1, 1]. When the function runs once, it works how you expect it to work. But, when it runs again, priorFibbed already contains the fib sequence and so it doesn't have to call itself recursively, it just takes the values from the array. The spec prior, for example, called fib on 22. So when fib(5) gets called it goes into the if statement because priorFibbed[5] already exists, and so it just returns the answer without calling itself recursively."],"testfirst recursion intro to recursion evenandodd":["I'm attempting to solve the CodePen problem at the bottom of the Intro to Recursion lesson called evenAndOdd. Below is my solution. It seems like whenever I push a number to my result array, the result array doesn't remember it. I cannot figure out why. Could someone help me understand why my solution isn't working?  My Solution  function evenAndOdd (arr) {   let result = [[],[]]   if (arr.length &lt;= 0) {     return result;    } else {     if (arr[0] % 2 === 0) {       result[0].push(arr[0]);     } else {       result[1].push(arr[0]);     }     return evenAndOdd(arr.slice(1));   } };","I think the order of when you call recursively and when you push to the result matters. Figure out which index of result you want to push to and the value that's to be pushed, then set result equal to the return value from evenAndOdd, and finally push the value onto result. It might be easier to see if you made a call stack diagram and watched the value of result at each call. HTH.","Thanks, Kimberly. This is what I came up with after your hint and it's working. I tried to use the debugger and understand what's happening under the hood but I'm still a little confused. If we push 'index' into result after the recursive call, wouldn't the very first index of an argument not get pushed into the result?  function evenAndOdd (arr) {                       let result = [[],[]]                        //base case                       if (arr.length === 0) {                         return result;                    //if arr still has values in it then...                    } else {                      //which index of result do we want to push the 0th index of arr into?                    let index = arr[0] % 2 ? 1: 0;                       //result will e                      result = evenAndOdd(arr.slice(1));                      //if we do this after we slice the first index off of arr then how does the very first index get pushed                       into result? does it get lost?                     result[index].push(arr[0]);                   };                      //after we've gone through each element in our array and pushed it into result, we return the result                      array.                    return result;                  };","Notice that the spec indicates that the array returned is reversed. By calling evenAndOdd before pushing that first value you'll push the function onto the call stack until there is no more array. Then the values are pushed onto result one at a time as the call stack unwinds until it hits the very first arr[0], which will be the last element pushed onto result.","Oh right, that makes sense because the base case requires the array length to be 0. Thanks for your help!","Can anyone help me demystify this line?  number % 2 === 0 ?  0 : 1;  I've never seen this notation and I can't find the MDN page for \"?'  Thank you!","It's a ternary expression. Basically, it evaluates the expression (in your case, whether the number is evenly divisible by 2) and then assigns a value based on whether it's true or false.          developer.mozilla.org             Conditional (ternary) Operator  The conditional (ternary) operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.                           let remainder = num % 2 === 0 ? 0 : 1;  In this example, if num is evenly divisible by 2, the expression evaluates to true, and the value of 0 is assigned to the remainder variable. However, if num is not evenly divisible by 2, the expression evaluates to false, and the value of 1 is assigned to the remainder variable.  Hope this helped!","Yes! Thank you.  I'm about to read the link you provided, but it seems like ? directs to true and : directs to false.  This saves a LOT of characters!","You've got it right! The structure is essentially this:  expression ? ansIfTrue : ansIfFalse;  Glad I was able to help!","I think I am still confused about how the call stack is actually working here, even after looking at this discussion. This is the solution I came up with:  const evenAndOdd = (anArray) =&gt; { let returnArray = []; let firstElem = anArray[0]; let evensArray = []; let oddsArray = [];   if (anArray.length === 0) return [[],[]];   else if (firstElem % 2 === 0) {  \tevensArray.push(firstElem); }   else oddsArray.push(firstElem);   evenAndOdd(anArray.slice(1));   return returnArray;  }  Can someone let me know of what I'm misunderstanding about the order of events in the call stack here?","Hi, Bianca,The first thing I notice is that you never assign any values to returnArray, which is the value you are ultimately returning.  Then, as pointed out here, the spec indicates that the array returned is reversed. I see that you are pushing the element onto either evensArray or oddsArray before you call evenAndOdd recursively. That's why the ternary operator (see above) is useful. It allows you to test for even or odd and save an index to push to. Then you can call evenAndOdd again, assigning its return value to something, and be on your way.","Isn’t there a problem with the function declaring empty arrays every time it is invoked?  I know they are declared by reference, but does this not reset the arrays to blank arrays each time?","Not if the empty arrays are declared in the base case. In which case, the empty array becomes the returned value of the very last item on the call stack, so every call popping off after that is pushing into that empty array. Is this what you meant?","No actually. That makes sense. I'm referring to the lines 2-5 where variables are declared as blank arrays as soon as the function is called:  const evenAndOdd = (anArray) =&gt; {let returnArray = [];let firstElem = anArray[0];let evensArray = [];let oddsArray = [];  Doesn't this reset the arrays as empty every time the function is recursively called?","Each time the function is called, new variables with function scope are created. Since new function variables are created with each recursive call, the others are not \"reset.\" As you unwind the call stack, that is, finish executing the function, the function returns its value to the call site. Here the call site is after the empty arrays are created, so the return value populates the empty array that is set equal to the return value.","Can someone please help me understand how the variable multDimArray is used here? It seems to only exist ephemerally. As I read the code it seems almost like multDimArray doesn't actually exist.   const evenAndOdd = (arr) =&gt; {  let nextArray = arr.slice(1); // returns a new array without the 0th element  let number = arr[0];  // the number to determine if odd or even    if(arr.length === 0) {    return [[],[]]; // this is the structure of the array we need to fill  } else {      const index = number % 2 === 0 ?  0 : 1;    const multiDimArray = evenAndOdd(nextArray); // recursive call, it returns the array needed for each recursive case    multiDimArray[index].push(number); // push the number in the proper array [0] even [1] odd    return multiDimArray; // return the array so the next recursive call has the array to work with  }}","It's confusing because recursion is just downright confusing lol! I still have to think step by step to even emotely understand it.  What is happening (I think) is that multiDimArray is being assigned the value of whatever evenAndOdd returns. But that return value does not occur until the if(!arr.length) returns true. Once that if statement is true, that's the end of the recursion, the empty array [[],[]] is returned, and each and every recursive call of that function starts popping off the stack and each return value of that call is pushed into that empty array (which at this point is now labled as multiDimArray). So, at first glance, multiDimArray is nothing, because there's no actual return value there. But what's actually happening is basically const multiDimArray = [[],[]]; and each number from the original array is being pushed into multiDimArray.  Does that help?","Hi I was looking this over and wanted to bump this thread.  I have looked at this for a bit and ran the function in the Chrome debugger, and am still not solid on exactly what this line is doing.  if(arr.length === 0) {      return [[],[]];       }  Each expression makes sense to me but not the control flow of the overall function.  This if statement is the end point of the recursive calls which slice the first element off the argument array.  However, the else statement is structured by pushing the elements into either array within the if statement.      const index = number % 2 === 0 ?  0 : 1;     const multiDimArray = evenAndOdd(nextArray);       multiDimArray[index].push(number);  But since the code in the \"else\" statement seems to be executed before the base case in the \"if\" statement, it seems like the function is placing elements into the two arrays (\"multiDimArray[index]\" where index is either 0 or 1) before these two returned arrays are issued from the base case.   The debugger showed the recursive calls slicing the argument array but didn't really clarify for me how the elements were then sorted into the arrays that were returned.  Also, relatedly, what would be the benefit of using this recursive solution over an iterative solution?  Is this less expensive?","Let's pass in a simple array of just two numbers, an even one and an odd one: arr = [1,2]. Look through the Chrome debugger how the call stack is formed. everOrOdd() is called 3 times and put on the stack. Let's see why. At the first call, it jumps straight to the else statement and stops at the line where it has to assign to multiDimArray a recursive call to itself. Program execution is halted and everOrOdd() runs again, this time with arr = [2]. It once again stops at multiDimArray and calls itself yet again, with arr = []. Now finally we have our first if case.   Now remember that our two other calls to everOrOdd() haven't finished executing yet. They are both stuck and waiting to assign a value to multiDimArray. Now that it has finally reached the base case it can start assigning values to the multiDimArray variable of each respective call.    The stack looks like this:  everOrOdd([]) -&gt; returns [[],[]] everOrOdd([2]) everOrOdd([1,2])  Once the last call returned to the 2nd call, the stack looks like this:  everOrOdd([2]) -&gt; returns [[2], []] everOrOdd([1,2])  Then like this:  everOrOdd([1,2]) -&gt; returns [[2],[1]] // Final result and final call is popped off the stack  As to your second question, I don't think that there is anything inherently better about doing it recursively in this case (both look like they have a complexity of O(n)), but I think it's just an excercise in training ourselves to be able to solve things recursively when needed since there are cases when iterating will not work (such as when you work with nested arrays). Most if not all things that could be done iteratively could also be done recursively.","Hi Sam,  Awesome! I think you located the source of my confusion, which was the fact that the \"else\" frames didn't complete execution until the recursive calls reached the if statement. So reasoning what you have laid out directly with the code:      const multiDimArray = evenAndOdd(nextArray); // at this point within each frame, control will not proceed to the next lines until the previous frame is returned.      const index = number % 2 === 0 ?  0 : 1; // this actually can be moved below the recursive calls      multiDimArray[index].push(number); // presupposes an array structure which will be returned from the last recursive call  So, from your example, in the second to last recursive call, the logic of the entire frame would look like this:  const evenAndOdd = ([2]) =&gt; {    let nextArray = arr.slice(1); // nextArray = []   let number = arr[0] = 2      if(arr.length === 0) {     return [[],[]]; // this is the next frame   } else {              const multiDimArray = evenAndOdd(nextArray) =  evenAndOdd([]) = [ [ ], [ ] ] ; // here we have the array structure presupposed by the code below       const index = number % 2 === 0 ?  0 : 1;  // index is 0 since its even      multiDimArray[0].push(2);          return multiDimArray; //  the array [ [2] , [ ] ] is then returned into its parent frame at const multiDimArray   } // so, in the next frame, control would resume with const multiDimArray = evenAndOdd([ [2] , [ ] ]), with 1 then pushed to the second array }  More generally, it seems like you have to reason through the call stack \"building\" as well as the calls stack \"resolving\" itself, and with complex recursive functions the latter stage is involved in structuring the solution.   By contrast, the other recursive function in the unit is less complex:  function repeat(str, num) {   if(!num) {     return \"\";   }   else {     return str + repeat(str, num-1)   } }  Here the base case is a blank string, and its role is to merely halt adding additional recursive frames. In the second to last frame, the return would be \"str\" + \"\", which would then get added to its parent frame, \"strstr,\" then back up the chain etc etc.  But since string concatenation is built into JS, no extra work needs to be done inside the function in order for the recursive calls to organize themselves during the \"resolution\" stage, which makes it easier to reason about."],"recursion finding base case":["Hi all,  I thought I understood how to find the base case in recursive problems but I still have a question. I thought the question to ask when finding it is, \"how will I know when I'm done?\", and that this usually means coming to the end of the collection. For example, if you have the string 'hello world' and you are making a function called vowelCount, your base case is when you have no string length left (you've iterated through it all). And this seems to be a pattern in recursion problems -- that the base case is an empty string or array or the number zero.  However, let's say you're trying to flatten a bunch of nested arrays using recursion. Is the base case when you've got an empty array (ie, you've come to the end of the array, having flattened everything you could), or is it when you've got a fully flattened array (ie, no element is an array itself?).  Here is a working solution:   function flatten(arr) {   var result = []   arr.forEach(function(element) {     if (!Array.isArray(element)) {       result.push(element)     } else {       result = result.concat(flatten(element))     }   })   return result } flatten([1, [2], [3, [[4]]]]);  It seems like here the base case is when the element is no longer an array. But why is this? Why isn't it an empty array, meaning you've iterated through everything, which would be in keeping with the pattern I've seen is most other recursion problems I've done?  And finally, will every recursion solution include an explicit base case as a rule? Or would the base case sometimes be written at the end in a different way?  Thanks!","Hi Bianca,  This flatten function doesn't quite fit the \"how will I know when I'm done\" reasoning pattern because it is written as an iteration (the forEach) that makes recursive calls.  In this case the reasoning pattern is \"for each element, do I need to call myself?\" There isn't so much a \"base case\" as an \"I don't need to recurse case\".  So, yes, you are right, there are different patterns of recursion.  The flatten function could also be thought of as a a \"double recursion\" on first and rest: concatenate the flatten of the first element of the array with the flatten of the rest of the array,    concat(flatten(arr[0]), flatten(arr.slice(1)))  The we would have two base cases: either we have a non-array, which we wrap up so the caller can concat it, or we have an empty array, which we return, or we concat the flatten of the first element with the flatten of the rest of the array,  function flatten(arr) {     if (!Array.isArray(arr)) { return [arr]; }     if (arr.length === 0)    { return [];    }     return Array.prototype.concat(flatten(arr[0]), flatten(arr.slice(1))); }  A matter of taste? Perhaps a little less efficient because of the extra wrapping up of [arr] in the first line. What do you think?","Hi David,  Thanks for your response! So just to make sure I understand what you're saying: if you're not using an additional method to iterate through your data (like a for-loop, a for-in loop, forEach, map), then you use the \"how will I know when I'm done?\" reasoning pattern, and you state a base case in your code to let it know when it's done.  However, if you ARE using an 'iteration method' in order to search through your data, then you will not actually need to write out an explicit base case in your code (though you could as you do above). It'll actually be simpler to inspect each element and ask, \"do I need to call the function again on this element?\" You want to simplify your data so that you can find the answer to your question, such as, \"are there any html files in this collection of files?\" or, \"are there elements in here for which the function passed in as an argument will return true?\". (Is this the kind of problem that could be solved using 'falsification', or can that be done in both 'types' of recursion problems?)  Let me know if I've understood you correctly. Thanks!","One more question: is it encouraged to NOT use additional iteration methods whenever you can when using recursion? Because isn't the point of recursion to negate/minimize the need for these additional iterations?","With recursion, I like to think of a base case is the very simplest version of the problem. Some problems can have two base cases, depending on the complexity and how you approach the problem.  Let's take in the flatten array function, we know that the end goal is to return an array that is not nested. There are multiple ways to complete this problem, and if you choose to use iteration, there are indeed two base cases. As stated above, one base case is if the array is empty, and the other is if the current element is not an array and need to be looped through traditionally.   Regarding your last question:  One more question: is it encouraged to NOT use additional iteration methods whenever you can when using recursion? Because isn't the point of recursion to negate/minimize the need for these additional iterations?  Absolutely not! Recursion is a useful tool when you don't know exactly when or where you need to stop. In a lot of cases, iteration can much more performant than recursion, because function calls and returns require state preservation and restoration, while iteration simply jumps to another point within a function. It's more complicated than just one is better than the other, see this article, that explains how recursion/loops run in different browsers. http://aaronheckmann.blogspot.com/2010/01/micro-optimization-javascript-recursion.html   Often times, the best way to construct a function is however it makes the most sense to you and if it is readable/maintainable. Right now, you're coding solo, but in the future, you'll be working in pairs at Fullstack and on teams in your job. In that context, it might make more sense to use a loop with/instead of recursion, because your code might be more easily understandable to other people on your team. Just for fun, here's my favorite version of flatten.   function flatten(arr) {   return arr.reduce(function (flat, toFlatten) {     return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);   }, []); }  Hope this helps!","I'd say it is a matter of clarity: use the technique which is easier to read and understand for a given problem.  When working with an array, the iteration functions are probably clearer: especially given the functions map, reduce, some, every, find, and so on.  arrayOfFiles.forEach(file =&gt; mungeFile(file)) arrayOfStudents.every(student =&gt; student.hasSubmittedAssignment)  Recursion shines when the data is structured in some nested fashion: a tree, for example, could be either a leaf, or a pair trees, the left-hand branch and the right-hand branch.     a Leaf: |-----|  a pair of left-branch,   ||            |     |           right-branch. //  \\\\            |-----|                        //    \\\\                                         |---|  |---|                                         |---|  |---|  Let's say each leaf contains a number and we want to sum all the values.  function treeSum(tree) {     if (tree.isLeaf()) {         return tree.value;     } else {        return treeSum(tree.left) + treeSum(tree.right);     } }  You could write that as an iteration, but you'd need to keep track of each branching point and go back - you'd probably keep an array of the parent nodes, like a stack. The recursive version keeps the parents on the call stack for you, so you don't have to do the bookkeeping:  function treeSumIterative(tree) {     let sum = 0     let parents = [tree];     while (parents.length) {        let current = parents.pop();        if (current.isLeaf()) {          sum = sum + current.value;        } else {          parents.push(current.left);          parents.push(current.right);        }     }     return sum; }  That tree is a contrived example; but consider that an HTML document is a tree of nested elements. (Each element can have multiple children, not just two, so we'd probably be back to a mixed iterative-recursive style...)    Hope that helps...!","Yes, exactly.  What is 'falsification'?"],"anyone else having difficulty with recursion":["In tonight's help desk anyone want to join together for a review of recursion?  I had difficulty with the checkpoint 2 recursion question and am still stuck on the correct answer...","I've been having a hard time with recursion too! I can understand the more basic recursion problems (like factorial) but when I try to figure out the more complicated ones(like the one on the last checkpoint) I can't seem to plan out the right way to solve them. I'm going to just keep practicing. I'm looking for problems online and checking out youtube videos. I'm hoping thinks will become more clear soon.","I agree that the harder recursion parts often are confusing.  The base case is sometimes really hard to determine.  And you might have to call the function recursively many places too.  One good thing to know is that in real-world production apps, you will probably never use recursion.  It's more of an academic / code interview kind of thing.","I've been adding notes on 'why' to my recursion examples to help me, for example:  function recursiveMap(array, callback) { \t// base case \t// stop when the array has no more elements \t// always return an array \tif (!array.length) return [];  \t// loop thru the array reducing sub-arrays into individual elements \t// get first element \tlet el = array[0];  \t// get remainder \tlet remainder = array.slice(1);  \t// if first element is an array, reduce it down to a single element \t// AND, i.e. concat, the results of calling this function on the remainder \t// need to evaluate 2 recursive calls b/c have broken array into 2 parts in lines above \t// if don't pass the remainder, it will be lost forever \tif (Array.isArray(el)) { \t\tlet valueFromRecursiveCall = recursiveMap(el, callback); \t\tlet valueFromRecursiveCall2 = recursiveMap(remainder, callback); \t\treturn valueFromRecursiveCall.concat(valueFromRecursiveCall2); \t}  \t// when get here el = an individual element \t// call the function on the individual element \t// and put this result into an array \tlet result = [callback(el)];  \t// create new array with individual elements concatenated \t// concat the results of calling the function on the remainder onto the processed individual element \treturn result.concat(recursiveMap(remainder, callback)); }","I would LOVE a group-Zoom/chat on Recursion tonight. I tend to hit walls whenever a recursive solution is called for. I'll keep an eye out for your ticket tonight, Tami.","I am happy to zoom / chat through any / all recursive-ness for anyone that wants help.  Just post to the help desk when you are ready."],"numbers are concatenating not adding":["Hi all,  Has anyone else had an issue with numbers concatenating like they’re strings (though ‘typeof' confirms they really are numbers)? The code below results in '54321' instead of 15 for example.  This is happening in my recursive call. Suggestions on stackoverflow.com include using using parseInt(), or Number(), etc. to force the issue I guess, but to no avail. Obviously I’m overlooking something or breaking a rule that would be useful to know.  Here’s my code and thanks for any insights  function sumTheDigits(array) {   if (array.length === 0) return '';   const sum = array.slice(array.length - 1);   return sum + sumTheDigits(array.slice(0, array.length - 1)); }","If you follow this function in a debugger it will become clear to you. Because of your 1st line if statement, once the recursive call is done the first thing to be returned is an empty string. Because of the tricky way coercion works, when you try to add an empty string and a number, JS will automatically coerce the number into a string. Try swapping the first 2 lines so the sum definition is first and the if statement is second, and instead of returning an empty string, return sum.  Just a small tip, instead of using slice here you can use const sum = array.pop()","I think it would be helpful to take a look at your base case. When array.length === 0, an empty string '' is returned which sets up your final return value to be of type String. When summing a group of numbers, what might be a more appropriate base case / starting point?","Just a small tip, instead of using slice here you can use const sum = array.pop()  In the interest of adhering to the principles of Functional Programming, I would advise against this; performing this operation will mutate the original array being passed in to the function which is a side effect we generally try to avoid if we can. An alternative would be to access the final element of the array directly by index:  const sum = array[array.length - 1]","Agreed; I had been flipping back and forth with that statement and left it where it should not have been (assigning an empty string)... but the upshot was that making the base case = 0 only concatenated a 0 to the end of my string! (Expected '543210' to be 15.) More troubles!   Thanks for your reply and thanks for your reply as well Adam ... unfortunately the two updates you suggested didn’t change the output. Something nefarious going on? I ran the code in repl.it and got the same concatenated results. I will stick with Scott’s solution formula for now which is failsafe … and maybe dig deeper into this at a later time.   Thank you both for your input!","Okay, I think I figured it out:    Natalia_Tupikow: const sum = array.slice(array.length - 1);  This doesn't return a number, but rather an array consisting of one element: the last number in the array. So instead of getting 5 on the first execution of the function, you're getting the array [5]. I'm assuming that javascript isn't sure how to combine these two different values and handles it by casting them both to strings and concatenating them.","That's genius. I think you got it... array.slice returns a new array with the extracted elements. Thanks so much Henry!"],"function type typeof 07 recursion solution":["Here's my solution:  function type(input) {    const toString = Object.prototype.toString;    let answer = toString.call(input).substring(8)    return answer.substring(0, answer.length - 1)}  How did you solve this one?","const type = (arg) =&gt; {   let stringAsArray = Object.prototype.toString     .call(arg)     .split(' ');   return stringAsArray[1]     .slice(0, stringAsArray[1].length-1); }  Since the string output from Object.prototype.toString is two words when passing an object, I split them into an array and used the second index to access the string name of the type, and used slice to return everything except the last character (to get rid of the trailing ']').  Your code is very compact and clear :).","Thanks, but I don't like how I just hacked off extra characters in the beginning and end. That worked this time, but doesn't seem very elegant. Lol","const type = value =&gt; Object.prototype.toString.call(value).slice(8, -1);  This one took me quite a while of trial and error, not to mention at least a half hour of just staring at documentation trying to figure out what the heck to do. The spec provided a few helpful hints like Object.prototype.toString was required and then to try using .call() which I have never heard of before. But as soon as I actually saw Object.prototype.toString.call() return something it clicked!  This is basically the same as justin's solution just a little bit shorter.  Also, Josh, once again I love seeing all of these answers because I always learn something new! I've never heard of .substring() either so that's really cool. But, don't feel bad, because Justin and I also just 'hacked off' the extra characters we didn't need    *disclaimer: this code was refactored at least twice"],"recursion fibonacci sequence":["Am trying to visualize how each function call evaluates, for example when you pass it fib(7)  function fib(num){    if (num === 0 || num === 1) {        return 1    } else {        return fib(num-1) + fib (num-2)    }}  This is my visualization of it:   Indicies     0  1  2  3  4  5  6   7Sequence 0  1  2  3  5  8 13 21  So when we call fib(7), what does the call stack look like and how does it evaluate?We are looking for the value of fibonacci in the index position we pass to the function - so the 7th index should start at 21?   So then what is num's value after each call?   (fib num-1) + fib (num -2) === fib (7-1) + fib (7-2) === ???  Id really appreciate a visualization of how these call evaluate so I can get a clearer mental model of how recursion works.   Please let me know and thanks!  Alex.","Here is a great visualization tool where you can see each call in the call stack and what value is returned.  Check this link.  The link will take about 10 seconds to load, after it loads, press the \"forward\" button to see each step of the function.    Keep in mind; the first call is fib(7).  Then, from within the function, there are two calls to the fib function, ultimately calling fib until base cases are met (as you described).   I suggest using python tutor  (the link above) with a smaller value than 7 at first, I'd try 3.  After walking through the steps with the value 3, it should be easier to follow along walking through the steps with the value 7.    Try going through this exercise first, as you have questions walking through the steps, please post them here!","Thanks scott - looks like the code is loaded up into the program already, but I keep getting a server is crashing error, even when I change the call to 3","Try this link for the argument 3","Unfortunately still getting same error","@Alex_Karalanian  Visit this link  Makel sure JavaScript ES6 is selected in the dropdown up top.  Then, paste the following code in:  function fib(num){     if (num === 0 || num === 1) {         return 1     } else {         return fib(num-1) + fib (num-2)     } }  fib(3);  Let me know if you can generate the sequence, it appears the link they generate to share isn't working properly, but you should be able to generate it on your own.","enter function ---&gt; fib(7)  call function:  fib(6) + fib(5);  call function:  fib(5) + fib(4)  &amp;  fib(4) + fib(3)    call function:  fib(4) + fib(3)  &amp;  fib(3) + fib(2)  &amp;  fib(3) + fib(2)  &amp;  fib(2) + fib (1)            call functionwith returns:   fib(3) + fib(2)  &amp; fib(2) + fib(1) &amp; fib(2) + fib(1) &amp; fib(1) + fib(0) &amp; fib(2) +fib(1) &amp; fib(1) + fib(0) &amp; fib(1) + fib(0) &amp; 1  call functionwith returns:   fib(2)+fib(1) &amp; fib(1)+fib(0) &amp; fib(1)+fib(0) &amp; 1 &amp; fib(1) + fib(0) &amp; 1 &amp; 1&amp; 1 &amp; fib(1)+fib(0) &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1  call functionwith returns:   fib(1)+fib(0) &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp;1    call functionwith returns:    21","Thanks Vincent this is really helpful!","I personally found this diagram extremely helpful (note: the base case is slightly different). The flow of the diagram/order of execution is top -&gt; bottom, left -&gt; right. The accompanying stackoverflow conversation can be found here. Hope this helps a bit as well!","Awesome resource. Thank you for sharing!","I was struggling to visualize this function, myself. Thanks everyone for sharing all of these resources!","I found this video to be incredibly helpful:  Plus it taught me about memoization which I've never heard of before.  =c)"],"07 recursion evenandodd shorter idea":["I try to refactor my answer to the shortestfunction evenAndOdd(arr, ans = [[],[]]) {    if(arr[0] === undefined) return    arr[arr.length-1]%2 === 0 ?     ans[0].push(arr.pop()) :    ans[1].push(arr.pop());    evenAndOdd(arr, ans);    return ans;}","Hi Suparoek,  I liked your solution - very concise!  In the interest of adhering to the Functional Programming paradigm we've been encouraged to use, I have a couple of small suggested changes:  function evenAndOdd(arr, ans = [[],[]]) {     if(!arr[0]) return;      const index = arr.length - 1;     arr[index] % 2 === 0 ? ans[0].push(arr[index]) : ans[1].push(arr[index]);      evenAndOdd(arr.slice(0, -1), ans);     return ans; }  With this implementation, evenAndOdd behaves like a pure function; the array arr originally passed as an argument remains unmutated and available to us in its unaltered form while still giving us the expected result.","Nice touch thank you. I can learn something from forum.","My solution works as described when passing the arguments of the spec, but fails specs. Can someone chime in?  &gt; function evenAndOdd(arr, ans = [[],[]]) { &gt;     arr[0] % 2 === 0 ? ans[0].push(arr[0]) : ans[1].push(arr[0]); &gt;     arr.shift(); &gt;     return arr.length === 0 ? ans : evenAndOdd(arr, ans); &gt; }","Sanjeev_Sharma: function evenAndOdd(arr, ans = [[],[]]) {&gt;     arr[0] % 2 === 0 ? ans[0].push(arr[0]) : ans[1].push(arr[0]);&gt;     arr.shift();&gt;     return arr.length === 0 ? ans : evenAndOdd(arr, ans);&gt; }  Specs were a little bit confusing. If you take a look at them, it expects the answer to be in reverse order.   expect(returnedValue[1]).toEqual([9, 21, 35, 97].reverse());  The specs are expecting you implement the function in a way similar to what the writer of the spec has written the solution. If you look at the solution, the numbers are pushed in the answer array from right to left. Your solution, pushes them from let to right.  Also, shift has a permanent effect. So your solution leaves array passed empty. This to me seems like a side effect. If the arr variable was to be used elsewhere, you might get bugs. I would use arr = arr.slice(1); instead.","I see what you're saying about shift. I did not realize that arrays and objects are passed by reference in javascript by default. I see the the major picture about why we use map over forEach inside functions now. Thank you!","Henry_Do:  function evenAndOdd(arr, ans = [[],[]]) {    if(!arr[0]) return;     const index = arr.length - 1; arr[index] % 2 === 0 ? ans[0].push(arr[index]) : ans[1].push(arr[index]);  evenAndOdd(arr.slice(0, -1), ans); return ans;}   There's a bug in this code. If arr[0] is equal to 0 it will return undefined.","Whoops, my mistake - you're absolutely right. if(!arr[0]) return should be if(arr.length === 0) return. Good catch!","return arr.length === 0 ? ans : evenAndOdd(arr, ans);  Can you please help me understand this notation? I've never seen \"?  :\" before.  Thank you","So this was my final answer, thank you everyone!  function evenAndOdd(arr, ans = [[],[]]) {     arr[arr.length -1] % 2 === 0 ? ans[0].push(arr[arr.length -1]) : ans[1].push(arr[arr.length-1]);     return arr.length === 1 ? ans : evenAndOdd(arr.slice(0, arr.length-1), ans); }","This is the ternary operator, and works a lot like an if else statement.   if(arr.length === 0){     return ans; } else{     return evenAndOdd(arr,ans); }  same as:  return arr.length === 0 ? ans : evenAndOdd(arr, ans);  Now say you did not want to return, but instead make changes to some array that stores only unique characters:  if ( !arr.include(someWord) ) { // array does not include someWord     arr.push(someWord);         // push word into array } else {     console.log('already in array'); }  same as:  !arr.include(someWord) ? arr.push(someWord) : console.log('already in array');  Notice we are not returning anything this time, simply making changes to an existing array given a condition. I hope that helped in your understanding of this!","Thank you! This is so much easier to read and write."],"07 recursion countthevowels how is this solution returning a number":["How is the below solution returning a number when 'aeiouAEIOU'.includes(sentence[0]) returns a boolean value?   spoiler  function countTheVowels(sentence) {           if (!sentence.length) {             return 0;           }           return 'aeiouAEIOU'.includes(sentence[0]) + countTheVowels(sentence.slice(1));         }","If you go into the console and type \"true + true\" (not as a string!) the answer may surprise you.  JavaScript is funny sometimes.","Wow, thanks! I did not realize adding trues would do that.","This is an example of type coercion where a value of one type is being converted to a different type; in this case, due to the presence of the + operator, the Boolean returned by Array.prototype.includes() is being implicitly type coerced to a Number such that true converts to a 1 and false becomes 0.  Here's a much deeper explanation if you're interested:          medium.freecodecamp.org             JavaScript type coercion explained – freeCodeCamp.o...  Know your engines"],"08 recursion solution map syntax":["Hi all!  Trying to understand a slight different in my code (left) vs. the solutions code (right), specficially the highlighted portions.   What is the o =&gt; stringify(o) doing in the solutions code? My code passes all the specs as is, so I'm wondering what I may be unintentionally missing!  Thanks!","Hi Maggie. I think o =&gt; stringify(o) is the same as function(o) { return stringify(o)}, if that is what you are asking. It looks like you don't need it though. On the documentation for the map method, it looks like you can just pass the callback function, like you did, if you only have one argument.         developer.mozilla.org             Array.prototype.map()  The map() method creates a new array with the results of calling a provided function on every element in the calling array.","To add, the documentation Bethany linked mentions in the \"Tricky use case\" section that passing a declared function to Array.map (instead of creating an anonymous function with explicit arguments) can cause issues if the declared function can take multiple arguments.","Gotcha! So it sounds like it may be a bit safer to declare an anonymous function, as in the solutions, but in this simple case my declared function worked since it only takes one argument.   Thanks!","Can someone point me in the direction of the solution videos? I would like to watch one for stringify.  Thanks,  Chris","Part 1 of 3. Should be able to play the others from here."],"object prototype tostring call question":["I am very confused with the functionality of everything in Object.prototype.toString.call  I mainly don't understand how we can use it on a string or a number which are not objects?   Any help or links to resources much appreciated!","I'm also not 100% clear on this but this article was really helpful for me.","When you call a method on a primitive, either directly like 12345.toString() or with .call as above, JavaScript temporarily \"wraps\" it in an object in order to be able to perform that method. http://adripofjavascript.com/blog/drips/javascripts-primitive-wrapper-objects.html  You get different results if you use call from just invoking it directly, though: 12345.toString() will give you \"12345\" as you'd expect, whereas Object.prototype.toString.call(12345) will give you the string \"[object Number]\". This is actually because different types' prototypes have their own toString methods overriding the one for Object.prototype.  info on Object.prototype.toString.call()"],"did anyone refactor their rpncalculator exercise using classes":["Here is my attempt below but I keep getting a SyntaxError: Unexpected token message about operationFunc in the pop compute method. Also, I posted this in 08-Recursion since there isn't a classes topic on here.   class RPNCalculator {   constructor(stack = []) {     this.stack = stack;   }   push(num) {     this.stack.push(num);   }   popCompute = function (operationFunc) {     if (this.stack.length &lt; 2) {       throw 'rpnCalculatorInstance is empty'     } else {       const num1 = this.stack.pop();       const num2 = this.stack.pop();       this.push(operatorFunc(num1, num2))     }   }   plus() {     this.popCompute((first, second) =&gt; first + second);   }   value() {     return this.stack[this.stack.length - 1];   }   minus() {     this.popCompute((first, second) =&gt; second - first);   }   times() {     this.popCompute((first, second) =&gt; first * second);   }   divide() {     this.popComputer((first, second) =&gt; second / first);   }  };  rpnCalculatorInstance = new RPNCalculator();  rpnCalculatorInstance.push(1); rpnCalculatorInstance.push(3); rpnCalculatorInstance.plus();","Hey, Danielle!  I reviewed your code and if you look at the line this.push(operatorFunc(num1, num)), you need to change 'operator' to 'operation' so it matches the parameter in the function definition! I also changed popCompute method to the shorthand syntax as such:  class RPNCalculator {   constructor(stack = []) {     this.stack = stack;   }   push(num) {     this.stack.push(num);   }   popCompute(operationFunc) {     if (this.stack.length &lt; 2) {       throw 'rpnCalculatorInstance is empty';     } else {       const num1 = this.stack.pop();       const num2 = this.stack.pop();       this.push(operationFunc(num1, num2));     }   }   plus() {     this.popCompute((first, second) =&gt; first + second);   }   value() {     return this.stack[this.stack.length - 1];   }   minus() {     this.popCompute((first, second) =&gt; second - first);   }   times() {     this.popCompute((first, second) =&gt; first * second);   }   divide() {     this.popComputer((first, second) =&gt; second / first);   } }","Ah, I should've caught that! Thank you so much!"],"recursion and return statement":["for the stringify solution here:   const stringify = obj =&gt; {    if (type(obj) === 'String'){        return \"${obj}\";    }    if (type(obj) === 'Array'){        const result = obj.map(o =&gt; stringify(o));        return [${result.join(',')}];    }  if (type(obj) === 'Object'){     let result = [];     Object.keys(obj).forEach(key =&gt; {         let val = stringify(obj[key]);         result.push(`\"${key}\":${val}`)     });     return `{${result.join(',')}}`; } return obj + '';  }  Can someone walk me through the logic of what this last line of code is doing:  return obj + '';  Removing it breaks a lot of things, but I can't pinpoint why.  Thanks!","In ES6, adding a string to a non-string will force an implicit type coercion. So if you pass an number it wont get in any of if statments, so the program will just return (lets say 1 + ' ' ) which will be '1'. Hope this helps","Yes, that's immensely helpful, thank you!"],"08 recursion stringify function":["Hello all. I am having trouble with the stringify function. Possibly the type function as well, I'm not sure if it works well or just manages to pass the specs. The type function is here:  function type (variableInput) {     let temp = Object.prototype.toString.call(variableInput);     let stringResult = '';     temp = JSON.stringify(temp);     for (let i = 9; i &lt; temp.length - 2; i++) {         stringResult = stringResult.concat(temp[i]);     }     return stringResult; }  And here is my stringify function:  function stringify (input) {     if(type(input) === 'String'){         return '\"' + input + '\"';     } else if (type(input) !== 'Array' || type(input) !== 'Object'){         return String(input);     } else if (type(input) === 'Array'){         let arrayTemp = []         let stringTemp = '';       for (let i = 0; i &lt; input.length ; i++) {           // arrayTemp.push(stringify(input[i]));           // stringTemp.concat(stringify(input[i]));       }       return stringify(arrayTemp);     }  }  I am lost at attempting handling an array. The expected output for[1, 'a', [true, 'b', [null], 'c'], 3]is'[1,\"a\",[true,\"b\",[null],\"c\"],3]'I am struggling with how to go through this. A few problems I am addressing:   Including [] brackets in the result. Removing spaces. Converting 's to \"s. Solving this recursively, because I keep finding myself leaning towards a for loop. On that note, solving it at all would be a start.   So far, I am expecting '1,something,' to equal '[1,\"something\",[]]'","Just one piece of advice, look into template literals using back-ticks. It should make it significantly easier to achieve what you want.  template literals","Similar to how you are wrapping your string return statement in double quotes; you will need to wrap your array return statement in brackets.","Hi Jordan-  Both suggestions above are great places to start.    For #s 1, 2,  and 3, I think you can look into doing some string manipulation with template literals.  This will give you a lot of control over the brackets/curly-braces wrapping as well as the double vs. single quotes.    For #4 - This is definitely a tough one to visualize - we are using recursion, but the base case isn't as clear as with numbers.    If you can imagine a simple scenario with no nested arrays or objects ([1, a, undefined], for example), I bet that's a no-brainer for you to handle.  You can consider handling one of these simple elements as your base case.  Write out how you would do that first.  Now, if you do have nested arrays or objects, what you would want to do is iterate through your array (I combined the use of a for-loop and recursion for this problem) until you hit one of these nested elements (how can you determine that it's a nested element as opposed to a standard element in your array?).    Then, you would want to treat that nested element as it's own simple array (forget it's nested - just handle it on its own using your base case code).  You will want to concatenate the string value you get from this operation onto the existing string.    Then, you can proceed to the next element in the original array.    Does this make sense?  If you want to see more code, I can help out there too.","Thanks Nancy. Yeah, I think I understand recursion, but I was struggling to implement it into this problem due to the problem being so complicated. I'm still skeptical that my type function is even correct, so it feels like I'm trying to build code onto more unstable code.  My type function has not changed, but my stringify function is now:   function stringify (input) {     let stringTemp = '';     for (let i = 0; i &lt; input.length; i++) {         let currElem = input[i];         // stringTemp += ',';         if(type(currElem) === 'String'){             stringTemp += `\"${currElem}\"`;         } else if (type(currElem) !== 'Array' &amp;&amp; type(currElem) !== 'Object'){             stringTemp += `${String(currElem)}`;         } else if (type(currElem) === 'Array'){             stringTemp += `${stringify(currElem)}`;         } else {             continue;         }         stringTemp += ',';     }     return `[${stringTemp}]`; }  This is providing me with closer errors:  Expected '[1,\"something\",[],]' to be '[1,\"something\",[]]'Expected '[1,\"a\",[true,\"b\",[null,],\"c\",],3,]' to be '[1,\"a\",[true,\"b\",[null],\"c\"],3]'  I think the only thing I'm missing is manipulating commas to be placed, but not after the last element in an array.","@Jordan_Langlinais Try making stringTemp an array and pushing to it instead of adding on strings. Then you should be able to call .join(',') at the end instead of worrying about your commas as you go.  Alternatively you could add a conditional statement that only allows stringTemp += ','; to happen when you are not on the last i of your loop, but this will look a little messy.  You can also manipulate your input with functional statements, while calling stringify only on elements that need to be further processed by stringify:      My solution (declarative)   let stringify = v =&gt; {   switch (type(v)) {     case \"Object\":       return `{${Object.keys(v).map(key =&gt; `\"${key}\":${stringify(v[key])}`)}}`;     case \"Array\":       return `[${v.map(el =&gt; stringify(el)).join(\",\")}]`;     default:       return type(v) === \"String\" ? `\"${v}\"` : v + \"\";   } };","@Benjamin_Wagner love this solution!    can you refresh my mind on the syntax of the end of the last line?  specifically the question mark ? and colon :      Having a hard time finding documentation explaining it, and as you can imagine, googling it sends me down a rabbit hole.  thanks in advance!","It's the ternary operator:          developer.mozilla.org             Conditional (ternary) Operator  The conditional (ternary) operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.                                   codeburst.io             JavaScript — The Conditional (Ternary) Operator Exp...  Shorten your if statements into one line of code with the conditional operator","awesome, thanks @David_Jung!","@Benjamin_Wagner how does the switch works in your solution? My solution is pretty close to yours, but I'm using if statments to check what is passed as an argument. I do like how your solution looks and seems a bit easier to read!","Ah yes, an array and then .join(',') makes a lot more sense. My attempt at adapting my code to this approach would be here:   function stringify (input) {     let arrayTemp = [];     for (let i = 0; i &lt; input.length; i++) {         let currElem = input[i];         if(type(currElem) === 'String'){             arrayTemp.push(`\"${currElem}\"`);         } else if (type(currElem) !== 'Array' &amp;&amp; type(currElem) !== 'Object'){             arrayTemp.push(`${String(currElem)}`);         } else if (type(currElem) === 'Array'){             arrayTemp.push(`[${stringify(currElem)}]`);         } else {             continue;         }     }     return `[${arrayTemp.join(',')}]` }  My error is expected '[1,\"something\",[[]]]'to be'[1,\"something\",[]]'  Not quite sure how to fix the double bracket at the end.  After looking at your code, my attempt at making it somewhat legible to me:  let stringify = (input) =&gt; {     if (type(input) === 'Object') {         return `{${Object.keys(input).map(key =&gt; `\"${key}\":${stringify(input[key])}`)}}`;     } else if (type(input) === 'Array') {         return `[${input.map(element =&gt; stringify(element)).join(\",\")}]`;     } else {         return type(input) === \"String\" ? `\"${input}\"` : input + \"\";     } }  So it looks like the last one is the base case, I guess?  I mean this is pretty unfamiliar and MDN rarely helps for me on things I don't know anything about.    condition ? expr1 : expr2  If condition is true, the operator returns the value of expr1; otherwise, it returns the value of expr2.   If the input is a string, return '\"${v}\"', and if not return the input plus nothing? Why is the + \"\" there?I also don't understand how an empty array as an element gets returned with this solution.How does the second index in const testArr = [1, 'something', []]; get processed through [${v.map(element =&gt; stringify(element)).join(\",\")}]?","@Jordan_Langlinais   If the input is a string, return '\"${v}\"', and if not return the input plus nothing? Why is the + \"\" there?  return type(input) === \"String\" ? `\"${input}\"` : input + \"\";  When our ternary evaluates as false, the base case returns input+\"\".   In ES6, adding a string to a non-string will force an implicit type coercion.  So when we hit our base case, if the type is not a string, we convert the input with implicit type coercion and send it back.  resource  How does an empty array as an element get returned with this solution?  When we hit our array case with an empty array, we basically need to execute this statement:  `[ ${[].join(',')} ]` //  ==&gt; is an empty string encased in [ ]  We can think about this without our map function because the array has no elements, so map has no effect."],"another pair of eyes on my recursion solution":["Hi all -- winding down and not sure why my recursion version of the factorial prompt isn't working. It doesn't pass either specs, which are 1)handles the base case and 2) correctly compuets factorial. I would think that if (num === 1) is my base case and that the factorial is defined by return num * factorialIterative(num -1).  Tested out different console logs from before and tested this on repl and pythontutor and they are all returning a correct factorial, say if I were to put in 5.  //recursive function factorialIterative(num){     // base case num = 0, just return 1      if (num ===1 ){         //return factorialIterative();         return 1;         console.log(\"done\")     } else {       //5*4*3*2*1       //(num) * (num-1) * (num-1-1)* (num-1-1-1)*(num-1-1-1-1)       //so num has to go down every time by one        //and multiplied by each other        // num is holding this       return num * factorialIterative(num -1) //pythontutor shows that it's actually executing the factorialIterative(num-1) half of line 29 first -- then, when it goes back to pop off the call stack, THEN it does the num * to the num-1s that were accounted for       console.log(num-1)      }  } factorialIterative(num);  If anyone could give me a hint in the right direction, that would be much appreciated! Thanks!","It may be because we are expected to write two separate functions -- one for the iterative case, another for the recursive. Check the specs for which specific function is being invoked for each test?  EDIT: Also, the base case is for 0, not 1. (If you invoke factorialIterative(0) with your current code, it will never finish executing).","i forgot to mention that I did the iterative version previously and that passed. For brevity's sake I just posted the recursive one which was the one with all the errors.   and thanks for pointing that out, I changed it to 0 but to no avail unfortunately.","Hey there, it looks like two things...1) the base case should be 0 as David mentioned and2) you have your function name incorrect... the recursive function name should just be 'factorial' not 'factorialIterative.' (make sure to change both instances) =)","that's what did it! Thanks!","hi all,can anyone share their \"factorialIterative\" code?  I'm going crosseyed trying to solve this with the iterative approach.  I'm getting stuck on for loops vs while loops.  my brain is stuck with the solution below, but it is not properly executing what the factorial of a number is...  const factorialIterative = (n) =&gt; {   debugger;let result = 1;    while (n &gt; 1) {    result *= n * (n-1);    --n;    // n = n-1;  }  return result;};  thank you!","hey here's my attempt at it. i think it works.  function factorialIterative(num){     let factorial = 1;     for (let i = num; i &gt; 0; i--){      // console.log(num) //5 5 5 5 5        // console.log(i) // 5 4 3 2 1        //console.log(factorial) // 0 5 10 15 20 25         factorial *= i         console.log(factorial)              }        return factorial; }  i did the recursion part before the earlier chapters on forEach so I can go back and refactor it but that's the general premise for now.","Hi, just wanted to share a way to do this functionally instead of imperatively:  const factorialIterative = n =&gt; Array.from(new Array(n), (_,i)=&gt;i+1 ).reduce( (a,b)=&gt;a*b )","Hey Jonathan! You would need to set the result as follows:  result *= n as currently you are multiplying two numbers to the result every iteration... for example right now if you input 3:  n = 3 : result * = 3 * 2 // 6n = 2 : result * = 2 * 1 // 12   Just need to multiply the current number to the result, and then go to the next iteration.","thank you everyone! this helped."],"quick question on recursion lesson explanation":["Hi all! This is more of a question about syntax than purely about recursion.  In the recursion problem, we are given this example  function repeat(str, num) {   if(!num) {     return \"\";   }   else {     return str + repeat(str, num-1)   } } //repeat('hello', 3) =&gt; 'hellohellohello'  the function's purpose is pretty straightforward, especially when you look at the last line that's commented.  The explanation right underneath it then states, \"The base case is when num === 0,\" which makes sense but why is it expressed as: if(!num)? I would have interpreted that as \"not a number\", and it seems like my google search backs that up as well. Is it synonymous with num===0 in recursion, or something?   thanks!","Hey, seems like they could have used (num === 0) as the base case.   I think they used this so that if one were to submit the function without a repeat value, it will return \"\".The conditional is taking advantage of the fact that 0 returns false (0 is falsy).","Hi,  You are  confusing a variable name (num) for a data type (number).  Hence you are reading this as not a number when that is not how the compiler would interpret this.  In order to understand what is happening, you need to take a look at the values for number.  As the recursion progresses to deeper levels, the number decreases (in this case from 3) until it is finally 0.  Part of the trick is to understand that logically, any number is considered true while 0 is considered as false.  The ! will cause the variable to provide the boolean value for variable and then negate it.  In this case as long as the value is not zero, it will evaluate to  not true or false.  Once you hit 0 it becomes not false or true.  For this recursion, the if statement could also have been written as   if (0===num) {....}  This is another example of why picking a descriptive variable name is important.  In this case, had the programmer used  \"iter\" or \"copies\" you might not have been confused by such a statement as   if(!copies){....}","Hi Seori,   This confused me as well and took me a bit to figure out, but I think it has to do with \"coercion\" and \"truthiness\"...I learned about these concepts during the bootcamp prep. Basically, values that are \"truthy\" are not actually true, but when coerced to boolean (i.e. when used in an if statement) they end up acting true. \"Falsey\" values are just the opposite.   Zero is a \"falsey\" value, meaning: if(0) will return false if(!0) will return true   Therefore, in this example, the base case will only run when num === 0 (i.e. when the return is true). So yes, they are synonymous in this case.   Does this make sense? Here's some documentation on Truthiness in javascript: https://developer.mozilla.org/en-US/docs/Glossary/Truthy   I hope this helps!","thank you, that makes a lot of sense! Blanked on coercion.   Thanks everyone!"],"general recursion question":["I'm experimenting with trying to write recursive functions, in several ways, to get better at it... however, I'm stumped here. I have two versions of a recursive function to flatten arrays.  The first one (which works) is:    function deepFlatten(array) {  const flattened = [];   if (array.length === 0) {    return flattened;  }    array.forEach(elem =&gt; {    if (!Array.isArray(elem)) {      flattened.push(elem)    } else {      flattened.push(...deepFlatten(elem));    }  })  return flattened;}   While the second one (which does not work) is:   function deepFlatten(array) {  const flattened = [];   if (array.length === 0) {    return flattened;  }    array.forEach(elem =&gt; {    if (!Array.isArray(elem)) {      flattened.push(elem)    } else {      flattened.concat(deepFlatten(elem));    }  })  return flattened;}   My question is.. why? In both cases, deepFlatten will always return an array. So why does the .concat() call not actually do that, despite the function call of deepFlatten(elem) returning a function? Am I missing something really obvious?","annnnnd it was answered by the help desk. Apparently concat creates a new array as opposed to mutating the original.  Moral of the story, if you're going crazy and tearing your hair out while trying to debug, you should probably read the documentation. Even of the methods you're pretty sure you know..."],"stringify fnc extra whitespace on recursionspec js":["Hiya,  My Test'em is failing when I stringify(fnc). The error is \"Expected 'function() {}' to equal 'function () {}'.\"  By the looks of it the initial fnc variable is initialised as:  var fnc = function() {},  But the stringify(fnc) results expects:  expect(stringify(fnc)).toEqual('function () {}');  Am I missing something with my solution or is there some extra whitespace in the spec? My function part of stringify():  stringify(){ if (['Boolean', 'Number', 'Function'].includes(type(input))) {     return input.toString();   } }  Cheers","That little issue has been already discussed a few weeks ago. It's related to some browser weirdness, Firefox and chrome on Linux if I remember well.  Just add some code to add the missing space\"  case 'Function':   return (obj + '').replace('function(', 'function (' );  and HERE is the discussion I was referring to.","Thank you very much Patrick, that explains it well."],"recursion guidelines":["Using recursion (other than easy problems) is pretty unintuitive for me, so I have to dumb it down to some guidelines when approaching these kind of problems. Anybody see anything wrong with what I have or have anything to add?   Create base case Return line must contain:2.a. a value that accumulates with each recursive call2.b.  recursive calling function while also modifying the argument passed so that it approaches the base case","Looks good to me! Though, as the recursion videos show, you don't always need to have a variable that accumulates the value since you can just directly return it.   Another thing that I have sometimes found helpful with recursive problems is adding an additional parameter. This could be something like passing in a value that you want the function to remember that it wouldn't otherwise. However, the video also says that it's good practice to cut down on extraneous parameters in function calls, so take that with a grain of salt.   Also, I definitely find that using the debugger is an invaluable tool for finding unintentional/incorrect return values. Using the debugger really helps to see exactly what is being sent and returned in the call stack.  Last, but not least, here is a cool site that can help you visualize some common recursive algorithms! Hope that helps! Let me know if that makes sense or if you want any code examples. Looks like you've got it down though!","That's a great website, thank you!","This looked like the right thread to add this discussion......  I took an alternative approach to the testfirst-part-2/recursion: fibonacci problem.... instead of working down by recursing through n-1 and n-2, I tried working from the bottom-up, i.e., working linearly up to n.  To make it work, I had to add some default parameters to the function call.  It causes one of the tests to fail because the number of recursive calls is the nth number in the sequence (10 and not 177).  What I'm wondering is:  what is \"proper\" recursion given prior discussion?  Is adding some parameters to keep track of state really ok?  How many is ok?  Or does it really need to be able to get everything it needs from whatever accumulation operation is done via the recursive call?  One could also argue this implementation is a recursively hacked non-recursive way of doing it, i suppose....   Here's the solution I came up with:  180512 - tagged below text as \"preformatted\" to fix indentation per comments below.180512 - per comments below, p and pp were my shorthand for \"previous (n-1)\" and \"previousPrevious (n-2)\"  function fib(arg, ct=1,p=1,pp=0) {   if (arg&lt;1) {     return 1;   }   let next=p+pp;   if (ct===arg) {     return next;   }   ct++;   return fib(arg,ct,next,p); }  Thanks,Jeff","Hi Jeff,  Way to use the search function!    Don't forget to format your code between two lines of three back ticks!","Hi Jeff,  This is a really interesting question. I wrote up some different versions of the fib function to see if I could gain any insights. The first version is the counting down version, the second counts down but uses a cache, and the third is your version.  let numCalls1 = 0; function fibV1(num)  { \tnumCalls1++;   if (num &lt;= 0) {     return 0;   } else if (num &lt;= 2) {     return 1;   } \t   return fibV1(num-2) + fibV1(num-1); } let sum1 = fibV1(10); console.log(\"numCalls1: \" + numCalls1 + \" sum1: \" + sum1); // Output: numCalls1: 109 sum1: 55   let numCalls2 = 0; function fibV2(num, cache={}) { \tnumCalls2++;   if (num &lt;= 0) {     return 0;   } else if (num &lt;= 2) {     return 1;   }    \t//let sum = fib(num - 2) + fib(num - 1);   let cacheVal1 = cache[num - 1];   if (!cacheVal1) {   \tcacheVal1 = fibV2(num - 1, cache);     cache[num - 1] = cacheVal1;   }      let cacheVal2 = cache[num - 2];   if (!cacheVal2) {   \t cacheVal2 = fibV2(num - 2, cache);      cache[num - 2] = cacheVal2;   }   return cacheVal1 + cacheVal2; } let sum2 = fibV2(10); console.log(\"numCalls2: \" + numCalls2 + \" sum2: \" + sum2); // Output: numCalls2: 10 sum2: 55  let numCallsUp1 = 0; function fibUpV1(num, count=1, fibSecond=1, fibFirst=0) { \tnumCallsUp1++;   if (num &lt; 1) {     return 1;   }   let next = fibSecond + fibFirst;   if (count &gt;= num-1) {   \treturn next;   }      return fibUpV1(num, count + 1, next, fibSecond); } let sum3 = fibUpV1(10); console.log(\"numCallsUp1: \" + numCallsUp1 + \" sum3: \" + sum3); // Output: numCallsUp1: 9 sum3: 55  Altogether the outputs were:  numCalls1: 109 sum1: 55numCalls2: 10 sum2: 55numCallsUp1: 9 sum3: 55  So your version actually had the least number of function calls. If we disregard your use of extra parameters then based on these results, I think the fibonacci problem doesn't illustrate a good use case for recursion. The iterative version seems to be better.  When it comes to traversing a graph or tree, however, it really makes sense to use recursion over the iterative approach.  Just my two cents. If anyone has more insight on this, I'd be really interested in hearing it as well!  Best,Brandon","Hi Jeff and Brandon,  That was an excellent idea Jeff! It's such a good idea that it is a common practice in coding called dynamic programming. However, Brandon's approach of storing it in a cache has much stronger applications than passing it through parameters. Imagine if instead of adding the last two numbers, you needed to access even earlier numbers (maybe more than two).   So dynamic programming gives a tradeoff between the amount of calls the program runs and the space in memory we have to use to store the values. This can make some problems actually feasible to do! For instance, take this classic algorithm of counting coins. If you used bland recursion, you would not be able to pass some of the testcases that HackerRank provides, and so you definitely need dynamic programming there.As a sidenote Jeff, it was hard to read your code. I didn't know what p or pp were supposed to do just looking at the function declaration.","Hi Isaac!   I found an additional resource regarding concepts of functional programming (including recursion) on CodeSchool that was really helpful...if you have access to CodeSchool and have a little time, check out Kyle Simpson's 'Functional-Lite JavaScript' course. He breaks down recursion into steps as well. Hope this helps!","Graham and Kayleen, thanks for all these pointers on the subject!    Definitely looking forward to learning more functional techniques here at FS!","Hey Brandon - cool seeing all the options like that.  Just wanted to share with you something I did with tree traversal once.  I used to work in a \"no recursion allowed\" environment: to handle a tree traversal, I maintained a list of \"bread crumbs,\" i.e, a list of pointers back to root, which I think is another case like your cache example above."],"08 recursion stringify":["I had some trouble with stringify. After watching the solution videos I understand how the solution works and how to tackle the problem. I am a bit confused why my code doesn't work though. Basically I used a for loop instead of forEach. I would think it would work similarly, but for some reason it gives me an infinite loop.   Code below:   if(type(input)===\"Object\"){         var returnArr=[]         var keys=Object.keys(input)         for(i=0;i&lt;keys.length;i++){             key=keys[i]             value=input[key]             returnArr.push('\"'+key+'\": '+stringify(value))         }         return \"{\"+returnArr.join(',')+\"}\"      }","There are a couple minor things that could be giving you problems. One, it looks like your \"key\" variable is never declared with the var keyword (unless it is declared elsewhere in your code). Two, you may have the same issue with the \"i\" variable that you are using as the iterator in your for loop. It seems odd that these issues would cause an infinite loop though. It may be one of those things where one minor syntax error causes a bunch of unrelated bugs.  Hope this helps!","I think Dustin is spot on. Testing with proper var declarations works for me:    if( type(input) === \"Object\"){     var returnArr = [];     var keys = Object.keys(input);      for(var i = 0; i &lt; keys.length; i++){         var key = keys[i];         var value = input[key];         returnArr.push('\"' + key + '\": ' + stringify(value));     }      return \"{\" + returnArr.join(',') + \"}\"   }","Ah yes that was it! Thanks so much! Need to condition myself to always use var   Also related but unrelated.. for some reason testem is throwing an error on the array spy spec saying I'm calling toString although I'm not...     if(type(input)==='Array'){     return \"[\" + input.map(function(elem){         return stringify(elem)    }) + \"]\"  }","In your example, it looks like you still want to add the , comma separators to the return values from the array. A hint given in the test specs at line 195 is:  // You might find Array.prototype.join useful.  Consider how you can incorporate the .join method with .map to append each stringified array with a comma.","The only reason I can think of is that toString is being called elsewhere in your stringify function (since it calls itself) or the type function is calling it.","I am willing to bet that if you take a look at the call stack, you will discover that both 'key\" and \"i\" are defined in a higher level.  If those variables were not previously defined, you would have received an error.  But since you didn't, I expect they were previously defined.  Hence the variables were not what you thought they were and thus caused the problems with your code."],"weird but minor test spec issue for 08 recursion":["Hi,  This is a pretty minor/peripheral-to-the-course's-real-content problem, but I have an issue with the test specs for 08-Recursion. When I run the test specs in Firefox, one of the stringify tests returns 'function() {}' instead of 'function () {}' and fails the test. But when I run them in Chrome or use the Chrome console, I get the correct results with the exact same code!  I've looked at the answer key, and their solution passes all the test specs on both browsers. Does anyone know what could be up with this?  I'm hesitant to just paste in my code in case anyone reads this by accident and spoils themselves with a (technically) working solution, but if anyone thinks it'd be helpful for understanding what's going on, I'd be happy to.","Hello Spencer,  There is a basic assumption that JS runs exactly the same on all browsers.  However, that is not always the case.  You might need to refer to https://caniuse.com/ to see if the code you are using is executed differently on various browsers.  This issue typically pops up when using newer functions which have not yet been standardized or implemented across all platforms.    If you would like further assistance with this question, please post your code and where you think the differences occur.  Regards,Howard"],"extra help with recursion":["I don't know why, but even after watching all the videos and reading the extra resources, I was still really struggling to use recursion for more than the most basic loops.  I did some googling and found this Codecademy tutorial that breaks it down reeeeeally slowly:           www.codecademy.com             Recursion in JavaScript  Recursion is when you make a call to a function within the definition of that function. It is an essential and powerful programming tool, and also one of the more difficult concepts to understand.                           It definitely helped.  Just thought I'd share, in case anyone else out there needs the \"Recursion for Dummies\" version.","Thanks!  I am also definitely struggling with recursion so I will take a look and hopefully straighten myself out!","If you need additional assistance with recursion, perhaps I can help.  Recursion is just a special case of a loop.  However, rather than writing the code as a loop, you write it for a general case and then just call the function again with a slightly different set (usually reduced) of inputs.  The input keeps getting reduced until you reach the simple case.  Then you build up the solution by returning and combining the results.  A recursive solution can always be rewritten as a simple loop but the reverse is not always true.  Please feel free to reach out to me should you have a specific question about recursion.","As stated, recursion is just another way of doing the same thing as loops.  Honestly, it's hard to explain because I know the CS theory. There's something in Mathematics called Proof by Induction. Recursion is very related. Hmm.  It might be better to look at it backwards (which is sort of how Proof from Induction works). You have a base case and you build up.  ex. Fibonacci.  You start the base case of fib(0) = 1 and fib(1) = 1. fib(2) is just the sum of fib(0) and fib(1). fib(3) is just the sum of fib(1) and fib(2). And so forth.  I looked at a couple videos right now, and this was the best one I could find.","Just completed the codecademy recursion series. It was very helpful, thanks for posting!","Definitely don't feel bad about struggling with recursion.  It's a topic that a lot of, especially beginner, computer scientists struggle with.  I'm actually a little surprised at how quickly they went through recursion in the videos (though as someone who's had a lot of practice with it I was secretly glad about the quickness of those videos...)","I found a repo on github that has a bunch of recursion problems. I've only tried a few so far but it seems like these guys would be pretty good practice for the final checkpoint.           github.com             JS-Challenges/recursion-prompts  recursion-prompts - Repository of prompts to be solved using recursion","Thanks for posting this Tyler! Lots here to keep busy with for the next week.","That repository is just what I need to practice for the third checkpoint, Tyler!  Thanks for sharing."],"using stringify on nested arrays":["Hey everyone,  When using the Stringify function on arrays, I'm wondering why the official solution works (hidden in case someone doesn't want any spoilers): Summary  function stringify(obj) {     if(type(obj) === 'String') {         return '\"' + obj + '\"';     }     if(type(obj) === 'Array') {         var result = obj.map(function(o){             return stringify(o);         });            return '[' + result.join(',') + ']';     }    But this solution does not work:   function stringify(input) {   if (type(input) === 'String') {     return '\"' + input + '\"';   }   else if (type(input) === 'Array'){     for (var i = 0; i &lt; input.length; i++) {       stringify(input[i]);     }     return '[' + input.join(',') + ']';   }  As far as I can tell, the only difference is that the official solution creates a new array, whereas the one shown below tries to modify the existing array. Note: I haven't solved the object portion of the Stringify function, which is why I'm not including it in these code snippets.","Just a note. I don't think your spoiler is working because it showed the code when I opened this post.  It doesn't work because you didn't assign the result of stringify(input[i]) to anything. input is the same before and after the for loop is ran. obj.map() returns a new array but it's assigned to result.  I'm assuming you implemented map() already in the 05 exercise. You should probably take a look at how you solved it again.","Sorry everyone, I tried to edit the post but the 'hide' feature is not working properly.","In the solution's recursive case, I noticed that the .map method takes a function with parameter o, which calls stringify again. I don't really understand where o is coming from - what value is being passed in as o, and how does it help successfully map the elements to the placeholder array, result?","Geena_Gao: In the solution's recursive case, I noticed that the .map method takes a function with parameter o, which calls stringify again. I don't really understand where o is coming from - what value is being passed in as o, and how does it help successfully map the elements to the placeholder array, result?  It's the current element in the array. You have to think about it recursively.  This is the source code in OCaml for all the functions of the List module in OCaml. It implements everything recursively. I would assume Javascript does it the same way.  I'll translate rev_map to Javascript code. rev_map is the same as map. It just uses an advanced form of recursion called tail recursion.  function rev_map(callback_func, array) {   function rev_map_helper(accumulator, array) {     if (array.length === 0) {       return accumulator;     } else {       let head = array[0];       let tail = array.slice(1);        return rev_map_helper(accumulator.concat([callback_func(head)]), tail);     }   }    return rev_map_helper([], array); }  So let's say we have this code.  let myArray = [1, 2, 3, 4, 5]; let addOne = function(x) { return x + 1; } let result = rev_map(addOne, myArray);  So rev_map_helper([], [1,2,3,4,5]) gets called. The array isn't empty. So we split it into 1 and [2,3,4,5]. Then we return the value of rev_map_helper([].concat[addOne(1)], [2,3,4,5]). I recommend stepping through the code using the Chrome Developer Tools and seeing everything that happens in the code."],"object prototype tostring call":["In the \"type\" exercise of TestFirst 08-Recursion, I figured out from the comments that I was supposed to use Object.prototype.toString.call(x), with 'x' being whatever input I was trying to determine the type of.  When you do this it spits out \"object\" + the type of your input.  However, for the life of me I cannot figure out why TF that works.  What is going on there?!?!  Thanks","You have to realize that Object.prototype.toString is not the same as Number.prototype.toString (which would be called normally on say 123.toString()) or Array.prototype.toString.  Other than that, call() is just calling the method explicitly.","Hi Molly!  I found this helpful article here that details how Object.prototype.toString.call works (scroll to the end). It also details other _.prototype.toString calls.   Essentially:  Object.prototype.toString outputs \"[object Object]\".  Once you put .call(input) at the end of Object.prototype.toString, you override the 'Object' portion to whatever your input was.   So, Object.prototype.toString.call(input) will output \"[object INPUT]\".   Other examples would be the following:    Screen Shot 2018-02-02 at 10.45.45 AM.png1490x878 63 KB","Got it. So I guess this is kind of like shadowing, where the two methods have the same name but are not actually the same thing."],"how does call work in the type utility function":["Hi All -   I am working on the 08 Recursion part of TestFirst P2, and I just built the type utility function (note: it's not recursive, just in that section).   I got the answer, but I don't really understand why .call effects the code in the way it does.   My question: where var bool = true, why does  console.log(Object.prototype.toString(bool))  return the value --&gt;  [object Object]  But   console.log(Object.prototype.toString.call(bool))  return the value --&gt;  [object Boolean]  It would be especially helpful if someone could point me to where in the .call documentation it alludes to this functionality! I stumbled across the solution through trial and error but am curious how I could have learned of this functionality via the  documentation for call   Thanks!","Hi Annalee,   // where var bool = true  console.log(Object.prototype.toString.call(bool))  // should return --&gt; [object Boolean]  IMHO, the test specs should have included a hint to check out the Object.toString documentation as it contains a section on Using toString() to detect object class","@Amal_Sudama  Thanks! Just what I was looking for.","For other's reference, this is what MDN documentation says:   Using toString() to detect object class  toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg."],"fibonnaci base case":["Hey, I've been thinking about this Fibonacci question too much recently, and something seems a bit off. It passed all the specs, but why the base case works if you set the base case to be if n&lt;=1:  function fib(n) { \tif (n &lt;= 1) { \t\treturn 1; \t} else { \t\treturn fib(n-1) + fib(n-2); \t} }  for example, for fib(2),  2 is not &lt;= 1, so it would go to the else statement and return fib(1) + fib(0). and in this case, fib(1) would return 1, but shouldn't fib(0) also return 1? if thats the case, 1+1 is 2, so your output should be 2, but in the end its 1...?","Hi @Leah_Gerald,  I'm not quite sure what you're asking, but take a look at this graph visualization  of recursion.  slight tweek to code above, try:  if (n &lt;= 1) {     return n // instead of 1 }","ya i did that, that messes up the test specs, but that gives you the proper #.   after talking it over (a lot), I realized either its counting starting at the zeroth index (ie the 0th fib number is 1 and goes from there) or its not actually asking for the fibonacci number, its asking for the NEXT number, whoops.","function fib (num) {  if (num &lt; 2 ) return 1;  return fib(num - 2) + fib(num - 1);}  Here's how I do it.  It helped me conceptually by writing each step.  fib(7);  // fibonacci sequence  0, 1, 1, 2, 3, 5, 8, 13, 21  0 + 1 = 1             Step 11 + 1 = 2             Step 21 + 2 = 3             Step 32 + 3 = 5             Step 43 + 5 = 8             Step 55 + 8 = 13           Step 68 + 13 = 21         Step 7  In short, fib(num) equals the previous two computations.  Here:  fib ( 7 ) = ( fib ( 5 ) + fib ( 6 ) )  And when you get to num === 2 or fib(2), your computation is accum + (1 + 0)  So there's no point is going beyond fib(2).","I guess fib(0) would be before Step 1, so there would be zero steps required.","the test suite expects the 0'th fib to be 1,       expect(fib(0)).toEqual(1);     expect(fib(1)).toEqual(1);  1, 1, 2, 3, 5, 8 ...  which is different from wolfram's0, 1, 1, 2, 3, 5 ...","Good, I guess.  That means my original solution is right.","Hi Leah!  This is also a really helpful tool I suggest trying: http://pythontutor.com/  If you put in your code it will show you step by step what is happening in the stack.","This is cool! Thanks @leigh_blechman"],"recursion stringify function":["Having trouble making this code work for the type array.  Advice?  function stringify(input){     if(type(input) === 'String'){        return '\"' + input + '\"';    } else if (type(input) !== 'Array' || type(input) !== 'Object'){        return String(input);    } else if (type(input) === 'Array'){        return stringify(input[0]) + stringify(input.slice(1));    } }","You have an OR statement between the NOT Array and NOT Object, it should be an AND (&amp;&amp;). ANDs only trigger with two truths. Or only need one truth to trigger. When your arrays hit the second half of the OR statement it becomes TRUE, an array is not an object according to the type function.  Once you get the array running through the second part you'll need to account for \"[\" \",\" and \"]\". My advice is create an new array where you push all the stringified element into and then when you return that array  return '[' + strArr.join(',') + ']';  That should do the trick.","Thanks, Brian.    I'd like to be able to write the function without using the map or another higher-order function---and instead, have it run completely recursively.  With that in mind, I don't think it makes sense to push elements into an array.  How do you suggest moving forward?","Play around with this version, see if you can get it to work. This is recursion only for the array. The problem with the recursion in your version was it was hitting an infinite loop, probably when the array became empty.  I added a base case to stop that from happening.  function stringify(input){  if(input.length === 0){    return \"\";  }  if(type(input) === 'String'){    return '\"' + input + '\"';    } else if (type(input) !== 'Array' &amp;&amp; type(input) !== 'Object'){  return String(input);    } else if (type(input) === 'Array'){    return \"[\"+ stringify(input.pop()) + ',' + flattenArray(input) +\"]\";  }}  This still isn't quite right because it isn't adding brackets from multi dimensional arrays. And the commas aren't there either.  If you can allow for loops or forEach, I know this works and uses recursion.  var arrStr = '[';    a.forEach(function(el, i){      arrStr += stringify(el);      if(i !== a.length-1){        arrStr += ','      }    });    arrStr += ']';    return arrStr;","err, actually with pop() the array comes back in a weird order. Same with shift(). I'll keep playing around with it to achieve the solely recursive version.","The problem with stringify is that you have to deal with several differing types of input.  These are objects, arrays, strings etc...  Each of those items (I'm specifically not using a JavaScript data type to verbalize the input), has differing output format requirements.  Therefore, you will need to have a cascading if-else-else-else statement or a case statement to get to the right formatting.  Once you can handle a simple item without nesting, you can start to setup the recursive cases.  If you don't want to use, map, you will have to implement it using a for loop or recursive code.  But remember the definition of recursion does not say you can't use map, but rather is says to keep breaking the problem into smaller parts which can be solved and then the result can be built up using the smaller solutions.  Using map does seem to provide the most succinct, readable, and hence maintainable code."],"map vs foreach stringify":["So I've been going through this problem to try and better grasp the Objects part of stringify and in this process decided to switch out the .forEach function for another .map function (like is used for the Array portion). When I did this, it still appeared to work, so I'm just curious about these two methods and when is best to use them - is one preferable over the other in this case? It seems like the main difference is that map returns a new array, while forEach works on the original?   if (type(obj) === \"Object\") { \tvar result = []; \tObject.keys(obj).forEach(function(key){ \t\tvar val = stringify(obj[key]); \t\t\tresult.push('\"' + key + '\": ' + val);  \t}); \treturn \"{\" + result.join(\",\") + \"}\";","Great questions @Layla_Hedges.  When reading the provided solutions, they aren't necessarily the \"best\" solution, many of the solutions try showing a different way of solving a problem, or using a method you may not be 100% familiar with (...yet).  In this case, the suggested solution is trying to show use cases for both .forEach and .map. If we were looking for an \"ideal\" solution, I'd refactor the .forEach to use .map, since we are pushing values into an array, it is the perfect use case for map.","@Scott_D_Alessandro thank you for the reply! This is just the information I was looking for, as I've been trying to get more used to map and just wanted to verify it was suited here too."],"video solution for 08 recursion":["I saw someone from Oct 16 mention a video solution for this test file, but I couldn't one.  Is there one available?  Thanks!","Here you go!                              You can find the links to this playlist and other video solutions in the readme files of the foundations-solutions repository. Hope that helps!","Thanks you for this!!"],"about the 06 functional category":["Post Questions relating to the 06_Functional Test Specs in Fullstack Test First"],"need help understanding my solution to the extensionsearch problem":["Hey there! So I need some help breaking down and understanding solution code. So my initial approach was to create something like this:  const extensionSearch = (searchValue, files) =&gt; {      let retVal;      let filterCallback = function(whatGoesHere) {          return whatGoesHere.includes(searchValue);      };      retVal = files.filter(filterCallback);      return retVal;  };  While I believe (I haven't gone back and tested it) that solution would pass now that I changed it a little,  I was failing the last two specs for a long time until I eventually went to the MDN documentation for filter, I followed one of the examples to create this function:  const extensionSearch = (searchValue, files) =&gt; {      return files.filter(function(files) {          return files.includes(searchValue)      })  }  This is the code I used to solve the problem.   But I'm not sure exactly why. I was hoping someone can break down the solution and explain it a little bit. I'm really confused on:  **what the parameter files is supposed to be. I was failing a spec, so I just put in the parameter files, and I started passing. ** the syntax of the second solution.  I also realized I need to review callback functions, and higher order functions to fully understand my solution code. Is there anything else I should look at to understand it better?What was your approach to solving this problem?","Your second solution here works great, but it can definitely be misleading because we have a two different variables in two different scopes both called \"files\".  A refactored solution might look like this below:  const extensionSearch = (searchValue, files) =&gt; {      return files.filter(function(file) {          return file.includes(searchValue)      })  }  Inside the callback passed to Array.prototype.filter(), we are only looking at one \"file\" at a time.  This variable is representing a string.  The variable \"files\" is an array of strings.","When I was a student in foundations, while reviewing higher order functions, I found it very useful to review all of the methods available on Array.prototype.  It is especially useful to know:1) What are the arguments passed to the callback.2) What is returned from the function.3) Does this method edit the original array it is called on?        developer.mozilla.org             Array  The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.","Jared_Usher: const extensionSearch = (searchValue, files) =&gt; {     let retVal;     let filterCallback = function(whatGoesHere) {         return whatGoesHere.includes(searchValue);     };     retVal = files.filter(filterCallback);     return retVal; };  I am not sure I remember this question, but based on your initial approach, I'm guessing you are supposed to search an array of files and return the search value. I tried to run the first function you coded and a reference error came up for 'whatGoesHere'. When you call .includes on whatGoesHere, javascript is looking for the value stored at the variable whatGoesHere, seeing if it contains the search value, and returning the boolean value of true or false. In your code whatGoesHere was not defined so calling the .includes method would return a reference error. But it you do files.includes(searchValue) you would not get an error because the variable files is defined. It was defined when you first called the extensiveSearch function.  Also, .includes only returns true or false, not the actual value. .filter takes each element in the array and returns a new array of values that passed what ever test you set in you function.    The syntax of the second solution works because the filter function called on the files array, takes each value, sees if it includes the search value and if it returns true passes that value into a new array.  I hope that this was helpful!","Jared_Usher: **what the parameter files is supposed to be. I was failing a spec, so I just put in the parameter files, and I started passing.  @Jared_Usher, regarding that note, I think it is helpful when working on test specs to keep the test specs open along side the solution code you are working on. That way, you can see how the functions you are creating are being called.  In this case, you can see that the extensionSearch function isbeing called with a string parameter as its first param, and an array of filenames as its second param.https://github.com/FullstackAcademy/TestFirst-Part-2/blob/master/07-functional-programming/01-use-array-methods/use-array-methods-specs.js#L80             extensionSearch('txt', [             'hello.txt',             'hello.png',             'hell.csv',             'mlb.txt',             'mls.png',           ])  This is why adding files as a param to your tests helped it pass -- this is simply how the function is being called."],"trouble with using map for swapcase":["Would someone mind taking a look at my swapcase code??? I'm getting \"capitalize is not defined\" and \"elem is not defined\".  getting a little stuck, would appreciate any help!  function swapCase(aString) {    let stringArray= aString.split(' ')    function capitalize(elem) {        if (anArray.indexOf(elem) % 2 === 0) {        return elem=elem.toUpperCase() }        }    return stringArray.map(capitalize(elem))}","And just caught a mistake in the code Iposed here inside capitalize. I used anArray instead of aString. still getting the same erros when I fix it though","Consider making capitalize as a helper function. Your first step is correct. We want to split the string into an array. Look at how you're using map here, and take note of the hint in the specs. \"HINT: the optional parameter \"index\" of the callback function may be handy.\" Based on what we know regarding map, it takes a Callback, current value, then optional parameters such as index. Refer to the Function Programming section .map, example to see how we might want to set up our .map here. Also, .map is going to have the bulk of our code, it's going to go through each element of the array, consider refactoring your if statement into here. Also take into consideration where we want to call our helper function. After creating an array of words, how to we turn them back into a string? Your return statement leaves them as an array of words. You need to add a method that joins the string together   I hope this was helpful. I was trying not to give tooooo much away. Good luck!"],"reduce callback is not a function":["Hey all, my reduce function is not passing any of the specs, I keep getting the error \"callback is not a function\". It looks pretty similar to other code I've seen people say works for them, would love any help on what I'm doing wrong.   function reduce(collection, callback, startValue) {let returnValue=startValuefor (let i = 0; i &lt;collection.length; i ++) {    let currentElement = collection[i]    returnvalue =callback(currentElement, returnValue)}return returnValue}","Hello Kevin. sorry, i take back on my previous post. when I ran your code it seems to work as well. I'm passing all the specs.","no problem Liang. Yeah, it seems to be doing the exact same thing as the code in the solutions file. I think I'll log onto help desk tonight to see if they can figure out what's going on","At a glance, it looks like your function is taking the arguments in the wrong order.  The test specs expect reduce to accept an array, starting value, and a combining function, in that order.  Also, seems like your callback is taking its arguments in reverse order, throwing a TypeError when using 'countWords' as its callback function.  I noticed 'returnValue' has a lowercase \"v\" in your for loop, but it's prob just a typo.    I'm actually kind of curious how others got the specs to pass with the exact code you have in the original post here.  Let me know if that helps, hopefully I'm not overlooking something."],"simulateropedude question":["I'm getting stuck on this test specGetting an error message  Screen Shot 2020-02-09 at 1.18.42 PM.png1400x508 105 KB   and here are my codes:according to the error message i feel it's how i use toLowerCase on submitGuess()but i'm not sure how to fix it. Can anyone help? Thank you   class RopeDude{  constructor(str){    this.secretWord = str.split('');    this.gameState = 'playing';    this.lettersGuessed = [];    this.remainingGuesses = 6;  }    submitGuess(letter){    let guess = letter;        guess = guess.toLowerCase();    if(this.gameState === 'playing'){      if(!this.lettersGuessed.includes(guess)){        this.lettersGuessed.push(guess);      }    if(!this.secretWord.includes(guess)){     this.remainingGuesses --;   } }    }    computeGameState(){  if(this.secretWord.every(elem =&gt; this.lettersGuessed.includes(elem) || elem === ' ')){   this.gameState = 'won'; }else if(this.remainingGuesses === 0){   this.gameState = \"lost\"; }else {   this.gameState = 'playing'; }    }    getSecretWordPuzzle(){   let getSecretWordPuzzle = this.secretWord.map(elem =&gt;{     if(this.lettersGuessed.includes(elem) || elem === ' '){       return elem;     }else{       return '#';     }   });   return getSecretWordPuzzle.join('');  }    getGameStateMessage(){    if(this.gameState === 'playing'){      return There is a total of ${        this.remainingGuesses      } guesses remaining:\\n${        this.remainingGuesses === 6         ? ASCIIART[ASCIIART.length -1]        : ASCIIART[this.remainingGuesses]      };    }else if(this.gameState === 'lost'){      return Game Over, the word was \"${this.secretWord.join('')      }\":\\n${        ASCIIART[0]      };    }else{      return 'Winner Winner Chicken Dinner, you won!';    }  }}  const simulateRopeDude = (str) =&gt; {  const letters = () =&gt;    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split('');  const game = new RopeDude(str);    function playRopeDude(){    let letter = letters[Math.floor(Math.random() * 52)];    if(game.gameState === 'playing'){      game.submitGuess(letter);      game.computeGameState();      return playRopeDude();    }else{      return game.getGameStateMessage();    }  }    return playRopeDude();}","Hi! Take a look at the playRopeDude functionYou call submitGuess using a letter variable as an argumentIs there any possibility of this letter variable being 'undefined'?If so, you're trying to call toLowerCase on an undefined value, as the error states","yes thank you such a silly mistake. in my const simulateRopeDude instead of setting up my variable letters, i wrote it like a function. coming back to the codes after a few hours I was able to find it. And thank you for your help too, @Rodrigo_Mallmann"],"invoking a function assigned to a constant":["How do I invoke a function more than once when it's assigned to a constant?  Example code:let count = 0;const name = () =&gt; count++;const log = name();console.log(count);//1  I believe the name function is invoked once in this example. Is there a way to invoke it again (i.e. such that count = 2) using const log (i.e. avoid invoking name function by using name())? Thanks!","Hi Tiffany,You are not assigning a function to log on line 3 you are assigning a value to log. If you want to use log to increment the count you could do something like this in the example below.   Also, you might already know this but when you write name as a one liner like you did there is an implicit return that might have some unintended side effects. You wouldn't really want to return anything from that function as you are incrementing a count. Let us know here or in the help desk if you have any questions.","This makes sense - thanks so much"],"best practices using for in":["SPOILER ALERT ----&gt; Contains solution for the includes() method!    After completing the exercises in which we recreate array methods, I reviewed the official solutions on GitHub. And I saw that, in crafting the includes() method, for...in was used to iterate the collections argument.  const includes = (collection, searchVal) =&gt; {   for (key in collection) {     if (collection.hasOwnProperty(key)) {       if (collection[key] === searchVal) {         return true;       }     }   }   return false; };  It's my understanding that for...in is not well suited to iterating arrays, yet this includes() method must take both Arrays and Objects. So why this choice? Is it that the arbitrary iteration behavior of for...in doesn't matter in this case? Obviously, the function works.  In my own solution, I checked first if collection was an array, and if so, used Object.assign() to turn it into a standard Object before using the same for...in loop pattern. Was that an unnecessary extra step?  Thanks for your insights on this!","Hey Amanda, I was confused also with the for...in on an array. I found this to be helpful why it can be use in an array https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-a-bad-idea","Interesting &amp; informative! Thanks for passing that along, Arielle!"],"a great article on map weirdness":["medium.com             Why ['1', '7', '11'].map(parseInt) returns [1, NaN,...  Javascript is weird.                           This article does a great job explaining some of the strange things that can happen as a result of .map()'s optional arguments.","Interesting -- thanks for sharing!"],"testfirst part 2 07 00 functional can someone take a look at my code for the reduce function and see if i can use it to solve the every function question which requires the reduce function i created":["I'm pretty sure the answer is no...b/c of the arguments I have for the callback function (I used the starting value as one of the arguments.. please see below). Interestingly, my code did pass all the test specs for the reduce function.. It looks different from the solution which contains the .forEach() method-- something I tried to avoid since I still don't have a strong grasp of this particular method (oops).  function reduce(arr,startVal,callback) {    let returnedVal = 0;    for (let i=0; i&lt;arr.length; i++){        returnedVal += callback(startVal,arr[i]);    }    return returnedVal}  Thank you in advance!","Ok I took another look at the code and am 100% convinced I can't use this code to solve the every function problem because I'm setting the returnedVal as \"0\" which is a number and therefore can't be mixed with boolean values...   Follow-up question: can the reduce function be solved without the .forEach method?  Many thanks","I keep answering my own question...  I figured it out! (I think)  function reduce(arr,startVal,callback) {     let returnedVal = startVal;     for (let i=0; i&lt;arr.length; i++){         returnedVal = callback(returnedVal,arr[i]);     }     return returnedVal; }  I'm gonna try to solve the every function problem using this code instead. Also, I would like to delete my original question but not sure how to...","What will you do if a middle value in the array is false, but the ones before and after it are true?","I think using \"&amp;&amp;\" should take care of that..?  So I have:  function every(arr,callback) {      const everyBoolean = (curVal,nextVal) =&gt; {         return curVal &amp;&amp; callback(nextVal);     }          return reduce(arr,true,everyBoolean) }  The idea is: If there is even one single false boolean value, the returned value is always going to be false b/c of the &amp;&amp; operator, as the reduce function iterates through each element of the array.  For example:  true (startVal) &amp;&amp; true (nextVal) =&gt; true (curVal)--&gt; true (curVal) &amp;&amp; false (nextVal) =&gt; false (new curVal)--&gt; false (curVal) &amp;&amp; true (nextVal) =&gt; false (new curVal)--&gt; false (curVal) &amp;&amp; true (nextVal) =&gt; false (new curVal)etc."],"cant find rope dude solution":["I clicked on the solution link and I don't see it there. Do I just need glasses or is it somewhere else?","Here is the solution repository. You can view the Rope Dude solution.  https://github.com/FullstackAcademy/foundations-solutions","I totaly missed it, Thank you!"],"test specs throwing errors when my return values actually match their expected value":["Screen Shot 2019-12-15 at 2.49.41 PM.png969x277 19.5 KB  Screen Shot 2019-12-15 at 2.49.50 PM.png951x277 20.1 KB   Not sure what's wrong here! Nor how to figure it out!","I have the same issues before, Did your code contains ' \\n ' after the phase There is a total of 6 guess remaining: ?","I also had these issues.  If you look at the error the test spec is returning, try highlighting what your code returned vs what's expected.  If it was like mine, you'll see that there are extra spaces in your answer vs theirs. I used \\n as well and the placement of \\n really matters to get the proper format for the answer.","Spacing guys! You don't need to use \\n. just do return `There is a total of ${this.remainingGuesses} guesses remaining:${ASCIIART[this.remainingGuesses]}`;"],"cannot figure out what is wrong in getgamestatemessage of rope dude project":["Hello everyone,  I can't seem to figure out why this code is wrong. I know that \"\\n\" should start a new line, but it doesn't look like spacing is the issue (judging from the expected ___ to be __). Any help is appreciated!   Screen Shot 2019-12-15 at 9.36.16 PM.png1074x590 62.6 KB  Screen Shot 2019-12-15 at 9.38.44 PM.png1840x548 32.1 KB","Never mind everyone. The code is correct, but I accidentally changed something in the spec file haha.."],"struggling with every method in the rope dude assignment":["I'm trying to use the Array.every() method and need some help about what's going on / why it isn't working the way I thought it would.  The Rope-Dude assignment specs define a computeGameState() function which is supposed to determine whether all the letters in the secret word have been guessed by the player, at which point setting the gameState property to true.   To determine this, I figured I would loop through every element (character) in the secretWord array, and check if this letter is included within the lettersGuessed array.   if(this.secretWord.every((letter) =&gt; {       console.log('letter is ' + letter);       this.lettersGuessed.includes(letter);     })){       this.gameState = 'won';     }  When this code runs on a game where secretWord = ['t', 'r', 'e', 'e'] and lettersGuessed = ['t', 'x', 'r', 'e'], I've determined that the loop runs once matching the 't' from secretWord[0] to its existence in lettersGuessed, returning true for that instance, but then does not run again. At least, I don't have another round of console.log(). And the total functionality (for the complete run of every(), not just its first iteration) actually returns false. I don't know where this value is coming from, or why it exits out of the loop when 't' returned true.  Below is the same idea implemented with a for loop, and this code works.   const wonState = () =&gt; {       for(let index in this.secretWord){         if(!(this.lettersGuessed.includes(this.secretWord[index]))){           return false;         }       }       return true;     }     if(wonState){       this.gameState = 'won';     }","What made you choose every over reduce? I'm still very new to map, reduce, filter, but does .every() need to return something?  likereturn this.lettersGuessed.includes(letter)?","The method \" tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.\" In my code, I was using it as the argument to my \"if\" statement -- so, if(every letter in secretWord is also in lettersGuessed), then change gameState to 'won'  I'm not sure now, though, if that's how the every() function inside of my if statement is actually working, though, and having a hard time tracing it myself.","Have you run a debugger?   What error message do you get from Test Specs?","The conditional expression is always the falsely undefined instead of a boolean because the brace { enclosed code-block of the arrow function does not have a return statement which defaults to undefined. Try returning the value.","Hi Mikayla, I have the same idea as using the every function. I think there is a little bug in your every function code that makes it won't work. In every function you need to return the result, just add the return keyword like   \"return this.lettersGuessed.includes(letter); \"     :grinning","I've tried both the every method and the reduce method and I think you guys are right with the every method. Mikayla, were you able to get your code to work once you add the return keyword?  Can someone help me figure out why .includes isn't working? it seems like this.lettersGuessed is undefined once it enters the every method   Screen Shot 2019-12-14 at 11.22.26 AM.png948x324 32.3 KB    Screen Shot 2019-12-14 at 11.24.25 AM.png1796x280 49.3 KB","@alexander_wang I have some time in the next 30mins to zoom if you'd like to pair on this. Let me know. I do suspect the variables might need to be swapped. Hard to tell without more context.  if (this.lettersGuessed.every(...{    return this.secretWord.includes(letter)...     }))...","Ah missed this. thank you for the offer!","I also tend to get some issues when I do multiple methods on a return statement... I'm not sure if I'm overlooking a larger issue but what I usually try is to separate it into two steps, i.e:    const included = this.lettersGuessed.includes(letter);    return included;","Also yes, my code did work once I used the return keyword! I did it where I stored the value in a const before returning it, though, as I wrote earlier"],"confused about the arguments for the reduce function especially in the every solution":["The solution for the .every() method is as follows:  const every = (array, checkerFunc) =&gt; {   const everyIterator = (currentVal, nextVal) =&gt;     currentVal &amp;&amp; checkerFunc(nextVal);   return reduce(array, true, everyIterator); };  My own solution omitted that everyIterator function, and instead just returned the value returned by reduce(array, true, checkerFunc). Going through my code, I see the third parameter in the reduce() method is a function which takes in 2 parameters, but in the case of the test specs our functions getValue() and isEven() only take in a single parameter. I understand there is an issue here, and I understand that the everyIterator function is checking to see \"whether the values up to this point are true and also the current value is true\", but I still can't fully wrap my head around the step-by-step process of this solution, versus my own.   Thanks!","Did your solution work?","@Mikayla_Toffler I think it might be helpful to think about what that last function parameter in reduce is intended to do. Let's call it 'iterator'Reduce takes an array of items &amp; \"reduces\" it down to a single return value, by taking the items starting from the beginning of the array, &amp; running them through the iterator one by one. The iterator takes two params, a, the \"accumulated value\" and b, the current item in the array.This iterator function's return value becomes the next iterator's a parameter.The last iterator applied on the last item in the array is our \"reduced\" value, and reduce returns.  every is an application of reduce where we want to know given an array and a function, does that function return true for every item in the array. In this case, it is reducing the array down to a single true or false return value.  So -- think about this case step by step using both your implementation &amp; the solutions':   const isEven = num =&gt; {    return num % 2 === 0;  }; every([11, 28, 2], isEven); // using the solution: const everySolution = (array, checkerFunc) =&gt; {      const everyIterator = (currentVal, nextVal) =&gt; currentVal &amp;&amp; checkerFunc(nextVal);      return reduce(array, true, everyIterator); } // [11, 28, 2] //  ^ everyIterator(true, 11) // true &amp;&amp; isEven(11) returns false  // [11, 28, 2] //      ^ everyIterator(false, 28) // false &amp;&amp; isEven(28) returns false  // [11, 28, 2] //          ^ everyIterator(false, 2) // false &amp;&amp; isEven(2) returns false  // ^ this is our last run, and our reduce returns false  // using your solution: const every = (array, checkerFunc) =&gt; {      return reduce(array, true, checkerFunc); } every([11, 28, 2], isEven);  // [11, 28, 2] //  ^ isEven(true, 11) // since isEven only takes 1 param, 11 is ignored, the function evaluates as true % 2 === 0  (returns false) // fun fact: true % 2 === 1 and false % 2 === 0  // [11, 28, 2] //      ^ isEven(false, 28) // (28 is ignored again) false % 2 === 0 (returns true)  // [11, 28, 2] //          ^ isEven(true, 2) // true % 2 === 0 (returns false)  Both implementations are returning \"false\" for every([11, 28, 2], isEven);, but the second is not actually evaluating isEven on the items in the array -- it is just evaluating isEven on our boolean \"accumulated value\" variable, ping ponging between \"true\" and \"false\" each iteration. If the array were [2, 4, 6], we would still get \"false\" even though every item is indeed even.  It might also be helpful to expand &amp; rewrite the solution for clarity's sake:I call the \"accumulated value\" a verdict because we are expecting just a true or false verdict for the entire array.  const every = (array, checkerFunc) =&gt; {      const everyIterator = (currentVerdict, nextItemInArray) =&gt; {           const nextVerdict = currentVerdict &amp;&amp; checkerFunc(nextItemInArray);           return nextVerdict;      }      return reduce(array, true, everyIterator); }","I'm lost on how the everyIterator function is able to take the nextItemInArray and assign it the next value in the array.","Ditto. I'm also unclear on how it takes currentVerdict and knows what to assign it to.  Also, I think I get that the point of the problem is to use reduce. But a for loop just seems easier for me to grasp. What are the main benefits to using reduce here and going forward?  my code using a for loop:  const every = (array, func) =&gt; {    for (let i = 0; i &lt; array.length; i++){        let el = array[i]        if (func(el) === false) return false    }    return true}","No, it does not work!","Thanks so much, this was very well explained. I definitely followed your solution all the way through, and that makes sense. Still having trouble re-summarizing it on my own once I look away though -- but that will come with more experimenting &amp; a better grasp on the reduce method.","I reread the documentation on reduce() several times and it helped me understand Matthew's a response a little bit more.  the currentVal is acting as the accumulator and nextVal is just the next element in array gets passed to everyIterator. I think? I feel like I've been banging my head against the wall trying to understand this logic","Hi @Emmanuel_Garcia,   Thought I'd take a stab and try to help answer your question.. I'm also stumbling across the problem but rereading what Matt wrote and using his example arrays to visually see it, I think I get whats happening there.. When we created the reduce() function in the prior assessment, reduce() takes in 3 parameters - an array, an initial value, and a callback function.   In Matt's example, everyIterator is the callback function for reduce() and has access the array provided in the every() parameters. The reduce() function takes the array (as the first parameter), iterates through it and feeds it back into everyIterator. everyIterator will use its own callback function which is the checkerFunc to see if the nextItemInArray is true or false . checkerFunc will then return a boolean, and then use that to compare it to the currentVerdict. If  currentVerdict &amp;&amp; (the return value of checked nextItemInArray) is true, return true.  I provided a screenshot of the notes I write as I'm trying to work through the problems. I hope that might give you another outlook on the problem and sorry if I confused you even further!   image.png1252x456 73.6 KB"],"the exercise on the callback function":["image.png1088x288 35.8 KB   When I run it on code pen it passed all the test, but when I run it locally, VSC threw an error that func is not defined. Can any one explain?","Your mistake is coming from what you are passing into your calculate function in your console log. You are passing in a number, that number being the result of calling add with 11 and 12. Calculate expects 3 arguments, the first being a callback, and 2 arguments to be passed into that callback when you call it in your return statement. Func is not a function because the first argument you are giving calculate is the number 23. I am not sure what you are supposed to be doing for this exercise, but calculate should work if you pass the arguments correctly. Hope this helps.","Just to add to that, you mentioned that “func” is not defined, but it is defined. It is defined as the value 23 in this case, which is why you are getting the error “TypeError: func is not a function”."],"confusion on every problem solution":["Hi!Could someone please explain to me the checkerFunction in the solution for the Every in functional problems?I am not sure how this works if the function has never been defined? I am sure what the function is supposed to be doing?   const every = (array, checkerFunc) =&gt; {  const everyIterator = (currentVal, nextVal) =&gt;    currentVal &amp;&amp; checkerFunc(nextVal);  return reduce(array, true, everyIterator);};  Thank you !","Hi Beth  The every function is your implenentation of the built-in array method .every  The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.  The checkerFunc is an argument that the function every takes in. The function everyIterator is able to use the argument checkerFunc because everyIterator is defined within every function's functional scope. It uses the function reduce (defined by you earlier) to iterate over each element in the array and reduce it down to one boolean value. This is a difficult problem, but with these ideas in mind, give it another go!  const every = (array, checkerFunc) =&gt; { const everyIterator = (currentVal, nextVal) =&gt; currentVal &amp;&amp; checkerFunc(nextVal); return reduce(array, true, everyIterator); };"],"error on video flatten an array with reduce":["The callback function flatten calls the currentValue  instead of currentIndex and is concatenated with an accumulator.currentIndex is just an index number of a multiDimArray unless it is used as accumulator.concat(multiDimArray[currentIndex])Thus, the use of currentIndex is misleading since it is actually returning a currentValue.  let multiDimArray = [[1,2],[3,4,5],[6,7]];  let flatten = function (accumulator, currentValue) {   return accumulator.concat(currentValue) } multiDimArray.reduce(flatten);","I understand your confusion with this problem. Array.prototype.reduce is a little bit different than all of the other Array.prototype methods.  Most Array.prototype methods accept a callback that takes three specific arguments: 1) The current element in the array, 2) The index of that element in the array, and 3) The array itself. So, in .map for instance, it would look something like this:  arr.map(function(element, index, arr){     ... code goes here ... })  Reduce breaks from this mold a little bit by accepting 4 parameters. 1) The accumulator 2) The current element in the array, 3) The index of that element in the array, and 4) The array itself. So, you can see that all of the arguments are in the same order as the other Array.prototype methods, but another argument has been introduced to the front of the list: The accumulator.  So, in the example that you gave, currentValue isn't actually an index (like it would be with other Array.prototype methods), it is the current value in the array.  In the example accumulator and currentValue are both arrays that you are concatenating together. Hopefully that helps to clear things up.","Thank you Justin.Yes, I wanted to point out that in the video it says currentIndex and passing an index instead of currentValue."],"good explanation on reduce":["Hi everyone,  Found this really good video explanation on reduce.    I also find his voice very soothing... He has some good videos explaining concepts and methods in addition to this one. Hope it helps!"],"06 functional programming includes function help":["hello,  Can anyone help me with my solution?  When I use the debugger it seems, after an iteration is found to be \"false\" and returns \"false\" that the system breaks out of the loop and stops.  Not sure what I'm doing wrong here.  thanks!","Hey, Jonathan!  Your function is returning true/false based upon the first iteration of your loop because of the conditional if/else statement that you have in place. So essentially, when your looping through the first array element, which is '1', you are checking to see if that is equal to the searchedElement, in this case '2'. Your if/else statement is saying, if the array element '1' is equal to the searchedElement '2', then return true, since it is not true, your else statement is returning false within that first iteration, so your loop never finished checking the rest of the array elements for a potential match.  The only refactoring you need to do is drop the else statement within the for loop and only return true within the loop if a match is found, and then place the return false statement at the bottom of your function outside of the for loop as such:  const includes = (array, searchedElement) =&gt; {   for (let i = 0; i &lt; array.length; i++) {     if (array[i] === searchedElement) {       return true;     }   }   return false; };  That way you can finished iterating over the array!","ah yes thank you @James_Stephens!  makes sense!","James_Stephens: const includes = (array, searchedElement) =&gt; {  for (let i = 0; i &lt; array.length; i++) {    if (array[i] === searchedElement) {      return true;    }  }  return false;};  When I copy and paste this answer into my VSC and run testem it shows the first spec as failing. Is this happening for any of you? I originally had come up with a similar solution but it kept failing so I had to look at their suggested solution.","Hi Danielle, the test spec you are failing is:  includes({moe: 1,          larry: 3,          curly: 9}, 3 )  should return true  You have to account for the input being an object. Hope that points you in the right direction.","Hey!  Yes, it does fail when running with testem! I actually only corrected his code from here and never ran it against the tests! As Joseph pointed out, the way the for loop is set up won't allow it to iterate over an objects properties. If you run the below code as is, the for...in loop will iterate over enumerable properties, which is what we are looking for in this case!  const includes = (array, searchedElement) =&gt; {   // for (let i = 0; i &lt; array.length; i++) {   for (let i in array) {     console.log(array[i]);     if (array[i] === searchedElement) {       return true;     }   }   return false; };  My solution for this problem is below:  const includes = (collection, searchVal) =&gt; {   for (let prop in collection)     if (collection.hasOwnProperty(prop) &amp;&amp; collection[prop] === searchVal)       return true;   return false; };","right, @Danielle_McCarthy, I also had to insert something to check if it was an array and then use the rest of the code to proceed.  below was my solution, it only tests against if the argument was an object (was checking the spec, specifically -- so it is a little short-sighted and would not work if the argument was something else).    @James_Stephens thanks for your solution, it is definitely much cleaner!","Nice! Thanks for posting your solution - always interesting to see others thought process.","Thanks for sharing! Your code is similar to the solution Fullstack gave us.   Are you using collection.hasOwnProperty(prop) so it doesn't take any properties in the argument collection's prototype? I was wondering about this when I looked at the solution because the below function passes all of the specs without using .hasOwnProperty. Is there a reason why you chose to use that method?  const includes = (myArray, matcher) =&gt; {   for (key in myArray) {     if (myArray[key] === matcher) {       return true;     }   }   return false; };","Yes, exactly! Initially I had my if statement excluding the .hasOwnProperty() method and it passed all of the test specs but when reviewing the solution I saw they utilized the .hasOwnProperty() and then further researched and implemented that into my own solution.  After reading multiple references and the MDN documentation on Object.prototype.hasOwnProperty(), it is suggested to use this method to avoid iterating any properties that are inherited somewhere along the prototype chain.  So implementing this method when iterating over an object will make sure that you are only checking over properties that are directly defined on the object in question!  Another helpful reference in gaining understanding is reviewing the MDN documentation on for...in. Specifically this section, Iterating over own properties only, and the examples directly below will help in explaining the importance (especially the second example where the object is created from a constructor function and the initial prototype is set as the triangle, ** copy and paste the code below and take a look at the objects properties and then look at dunder proto). It truly depends on the context of the environment for the object and how everything has been strung together.  var triangle = {a: 1, b: 2, c: 3};  function ColoredTriangle() {   this.color = 'red'; }  ColoredTriangle.prototype = triangle;  var obj = new ColoredTriangle();  for (const prop in obj) {   if (obj.hasOwnProperty(prop)) {     console.log(`obj.${prop} = ${obj[prop]}`);   }  } console.dir(obj);","Thanks! Reading time.","has anyone attempted a solution that returns true if the array is an object, and the match value is itself a key, not a key value? like so that   includes({moe: 1, larry: 3, curly: 9}, 'moe')   returns true? seems to me that all of the solutions presented in this thread would return false, since they only check whether array[prop] === value, but not the prop name itself.  is this a valuable exercise? i'm not sure why there is even a test spec involving an object when it clearly instructs us to treat an array argument. seems like this kind of implementation would force us to treat an array arg and an object arg as separate cases, which is annoying, but it seems arbitrary to only search for matching values and ignore any matching keys.  but maybe i'm off base on one or more finer points of this exercise.","An object's key names aren't really data values in the same way as their, well, values. They can only ever be strings, whereas their associated values can be any type, and in practice the key names aren't usually used in the same variety of ways. So there probably wouldn't be any actual use for searching both key names and values in the same function. There's never a reason NOT to try it as an exercise, though. Using JSON.stringify() comes to mind.  Also, you don't have to treat arrays and objects differently if you use for...in. It essentially treats the indices of an array like keys that are just numbers (which they kind of are, but not quite, and in a special sort of way).","Can I jump in here and ask about my includes function too? Mine does not return false.  const includes = (obj, prop) =&gt;{     for(let key in obj){         if(obj.hasOwnProperty(key)){             //console.log(key) // 0 moe 0 0 --&gt; first key from every object (looping through)             //console.log(obj) //just returning all the arrays             return true         }              }     return false }  I'm confused about the need for the line in @Jonathan_Ciccarella's if (array[i] === searchedElement) -- doesn't obj.hasOwnProperty and  for(let key in obj) take care of that? Also the second parameter, prop, is for property but would appreciate some help in understanding that line of code.   Thanks!","@seori_sachs: hasOwnProperty checks if an object has that key (and it isn't in the prototype chain). It doesn't check whether or not that key holds the specified value.  let myObj = { 'foo': 'bar'}; myObj.__proto__.bar = 'xyz'; myObj.foo; // returns 'bar' myObj.bar; // returns 'xyz' myObj.hasOwnProperty('foo'); // returns true myObj.hasOwnProperty('bar'); // returns false","Delayed thanks!   This is how I made my includes method  const includes = (obj, prop) =&gt;{     for(let key in obj){         //console.log(key)        //console.log( key === prop)        //console.log(prop)         if (obj[key] === prop){             return true;                      //console.log(obj) //just returning all the arrays             //return true         }             }     return false }","Can someone explain why the 'for (let key in object)' loop will still work with arrays? I thought it was specifically a loop for objects.  (Does this have to do with the prototype chain where array can access object prototype properties?)  Thanks!","An array is also an object. A special type of object. Object literals {}, arrays, and functions are all objects. When it comes to arrays they don't appear to have key/value pairs like objects do {key: value}. Array: ['value', 'value', 'value']. However if you consider the index of each of these values in an array then you would have key/value pairs which can be iterated with a for in loop: [0: value, 1: value,  2: value]. You can't see this directly but if you console.dir(['value', 'value', 'value']) then you will be able to see it.","Okay this makes so much sense- thank you!!"],"issues with test specs 01 use array methods":["Hi,   I was working on this problem set without any issues - testem opened a local host webpage and I could see the test spec successes and failures. Out of (seemingly) nowhere, the local host webpage changed to \"No test specs.\" In VSCode, it seems there are now errors in the test spec document (use-array-methods-specs.js) which are preventing testem from functioning. I did not make any changes to the document and can't seem to get it to work. I've tried restarting my laptop and checking other documents' test specs and those are all working properly. Not sure how to proceed, any help will be greatly appreciated! Thank you.","Hi Christine,  It might be that you introduced an infinite loop in your code. This is often confusing the first time it happens since your test specs never show you exactly what the error is.  There are a couple of options to check if that's the case.   Try commented out the most recent change to you made to use-array-methods before the test specs broke. If they run ok, then take a look at that bit of code and try to find where it might be looping. You can also disable certain tests from running so that you can try to pin point which test it is breaking on. In order to do that, you type an 'x' in front of the it statements in the spec file. I would recommend starting with the specs related to the most recent code you added and working backwards.   This part of the jasmine documentation has an example https://jasmine.github.io/2.1/introduction#section-Disabling_Suites  Hopefully this helps!Lindsay","Hi Lindsay,   Thanks so much for the tips! I will try both!"],"curly braces throwing specs off spoiler alert":["So I was writing my 'every' and 'some' functions, and I came up with this:  const every = (arr, func) =&gt; {   const iterator = (prev, next) =&gt; {   // BRACKET IN QUESTION     prev &amp;&amp; func(next)   }                                    // BRACKET IN QUESTION   return reduce(arr, true, iterator) }  const some = (arr, func) =&gt; {   const iterator = (prev, next) =&gt; {   // BRACKET IN QUESTION     prev || func(next)   }                                    // BRACKET IN QUESTION   return reduce(arr, false, iterator) }  ...and it didn't pass specs. I couldn't for the life of me figure out what the deal was, and then I got rid of the brackets in my internal iterator functions and it magically cured everything. I figured that, if anything, NOT having the brackets would cause problems. Any ideas what the deal is?","That's so strange. Does it work if you include return in the iterator function? My best guess it that it has something to do with how arrow function behave.           developer.mozilla.org             Arrow functions  An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and th...                           I'm not sure if I'm reading this documentation right (the code under the shorter functions section) but I think the curly braces need to be dropped before you can drop the return. I can't find anything that specifically says thats the rule though.  I also found this:          codeburst.io             JavaScript — Understand Arrow Function Syntax  Learn arrow function syntax by example.","Just to clarify a little bit, when you do an arrow function and there is only ONE statement, there is no need for the curly bracket. It is implied that you will return that statement.If you need to do something else and require more , then you need curly brackets. Attached is something to help explain it better. Screen Shot 2019-03-22 at 2.56.17 PM.png2554x766 119 KB","Hello!  Jon here. Just to clarify a little bit more:   Arrow functions are built to implicitly return code that is a one liner i.e. code that is fully executed using only one line of code, such as your prev &amp;&amp; func(next) statement. If you open up an arrow function with curly braces, however, then the function does not implicitly return your code as it is expecting a longer block of code and will only return whatever is supplied to a return keyword. As with any function in JavaScript, a function that doesn't explicitly return anything will return undefined, and since you used brackets on your iterator function you were not implicitly returning hence your not being able to get the specs to pass.  Hope this helps!","Hey Dan,  To better visualize what Jon is explaining, when you had curly braces, you need to explicitly return something. If not, the function implicitly returns undefined.  const iterator = (prev, next) =&gt; {     prev &amp;&amp; func(next)  }  You original code above was implicitly returning undefined since you didn't explicitly return anything.  When you remove the curly braces, the next statement will be taken as a return statement.  const iterator = (prev, next) =&gt; prev &amp;&amp; func(next)  The modified code above implicitly returns prev &amp;&amp; func(next). That is why removing the braces magically cured things.  I remember this throwing me off when I was playing around with arrow functions and this is how I understand they work.  The MDN page on arrow functions provide nice examples of their uses:        developer.mozilla.org             Arrow functions  An arrow function expression is a syntactically compact alternative to a regular function expression, although without its own bindings to the this, arguments, super, or new.target keywords. Arrow function expressions are ill suited as methods, and th...                           Hope this clears things up.","Thanks all! These responses all helped a lot, and now that I've gone over the Arrow Functions lesson, it has been more or less cleared up for me."],"reduce function with for loop":["Hi!   I got my reduce function to work with a while loop, and I see in the solutions that array.forEach() also works, but I could not figure out how to write a reduce function with a for loop--the loop only ever ran one time. What is wrong with my for loop? Code for both loops below:  function reduceWithWhile(array, startVal, combinFunc){\tlet returnValue = startVal;  \tlet i = 0;  \twhile (i &lt; array.length) {    \treturnValue = combinFunc(returnValue, array[i]);    \ti++;  \t}  \treturn returnValue;}  //**Working**////=&gt; output is 11 for reduceWithFor(['hello there this is line 1', 'and this is line 2'], 0, countWords)  function reduceWithFor(array, reduceStartVal, combinFunc){  for (i = 0; i &lt; array.length; i++){    returnValue = combinFunc(returnValue, array[i]);  }  return returnValue;}  //**Not Working!!**////=&gt; output is 6 for reduceWithFor(['hello there this is line 1', 'and this is line 2'], 0, countWords)  TL;DRL Why won't a for loop work when I write my own array.reduce function?  Cheers,Jing","Hi Jing!   Does your reduceWithFor work if you declare returnValue outside the for loop like how you have it in your reduceWithWhile (let returnValue = startVal;)?","It does not!  //**Still not working for loop**////=&gt; output is still 6 for reduceWithFor(['hello there this is line 1', 'and this is line 2'], 0, countWords)  function reduceWithFor(array, reduceStartVal, combinFunc){  let returnValue = reduceStartVal  for (i = 0; i &lt; array.length; i++){    returnValue = combinFunc(returnValue, array[i]);  }  return returnValue;}","Oh I think I see it! I think there's just a let missing in the for loop: for (let i = 0; i &lt; array.length; i++). Does that get it working?","Hi Jing,   I'm a mentor with Fullstack! I tried running your for loop solution with the addition that Mercedes suggested (setting the value of returnValue to reduceStartVal outside the loop) and got the correct solution. (Nice teamwork there  ) I wonder if it could have something to do with your solution for countWords? This might be a good question to talk through with a mentor on help desk tomorrow if you have more questions!  I'd suggest taking a look at whether the dependent function works for a while loop but not a traditional for loop.   Cheers!Lindsay"],"passing all but one spec spolier":["const dontSpillTheBeans = (obj) =&gt; {  let secret;return   {    getSecret: function() {     return secret;    },    setSecret: function(set) {      secret = set;    }}}  This is the test spec: it('getSecret returns secret value that was passed to the dontSpillTheBeans function', () =&gt; {    expect(secret.getSecret()).toEqual(      \"I'm proposing to my significant other this Friday\"    );    secret.setSecret(\"It's a surprise, don't say anything\");    expect(secret.getSecret()).toEqual(\"It's a surprise, don't say anything\");  });  I am trying to figure out what I need to add to my getSecret function to satisfy this test spec.","I noticed you initialized with let secret, but never declared what secret should be. Perhaps that's the issue?","Yes, I figured out that I was placing secret in the wrong place. It should be inside the parameter."],"cant pass separateandreturnnames test spec calls array prototype map and array prototype filter":["Hello! I can't seem to pass this test spec for 07-functional-programming/01-use-array-methods: Screen Shot 2019-03-22 at 12.08.45 PM.png701x54 10.5 KB   I call both. Do I need to call Array.map and Array.filter three times or am I not calling them properly/not in the right order? Here's my code (sorry, I can't figure out how to get it to indent properly):  function separateAndReturnNames(array, property, value) { return array.map((el) =&gt; {     const nameArray = el.name.split(\" \");     el.firstName =  nameArray[0];     el.lastName = nameArray[1];     return el[property]; }).filter(el =&gt; {     return el.length &lt;= value; })  }","This tricked me as well. You need to call the map method twice in your solution. I originally had it set up exactly as you do with my map method setting up the first and last name props AND returning the designated property. I ended up just splitting it up with my first map call setting up the first and last name props, and then my second map call returning the designated property, but theres other ways I'm sure. Hope this helps!","Thanks Robert! I'm going to split them up as well."],"part2 testfirst 06 recreate filter using reduce":["I am trying to understand 'Recreate Filter' under 'using reduce' question and I am not sure why I passed this test...  I watched the solution video, I noticed that solution video is using .push(), not .concat()Since currentElm is not Array, it make scenes that we should use .push(). However, I could pass the test with .concat() as below.  My code is below: const filterReduce = (anArr, aFunc) =&gt; {    const finalArr = anArr.reduce((accumulater, currentElm) =&gt; {        if (aFunc(currentElm)) return accumulater.concat(currentElm);        else return accumulater;    }, [])    return finalArr;}  It would be great if I can get some ideas why .concat() is working in here...Thank you very much!","Hi Miyuki,  I took a look at the documentation (see below) for .concat() and it looks like it takes either an array or non-array arguments and merges them together. So it looks like .concat() is acting like a pseudo .push() in your code with the only difference being that .concat() is returning a new array on each iteration instead of .push() adding the element to the already existing array.  I'm not 100% sure if that is right but that's the only explanation I could think of.           developer.mozilla.org             Array.prototype.concat()  The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.                           \"The concat method creates a new array consisting of the elements in the object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array).\"","Hello Kyle,  It is embarrassing that I only took a look the first part of the documentation and examples And thank you very much for pointing out that .concat() copies the values of strings and numbers into the new array.  While I was trying to understand the difference between .concat() and .push() in the code I posted in previous message, I got confused because changing .concat() to .push() method did not work. But now, I believe I needed to change some other parts of code if I use .push() instead of .concat() because what we receive as returned value are different between those two.  const filterReduce = (anArr, aFunc) =&gt; {    const finalArr = anArr.reduce((accumulater, currentElm) =&gt; {        if (aFunc(currentElm)) {            accumulater.push(currentElm); //this returns the length of array, not array!            return accumulater //this returns array!        }            else return accumulater;    }, [])    return finalArr;  Now I feel comfortable switching code between .push() and .concat()   Thank you very much Kyle, again pointing it out!!!Best Regards,"],"getting stuck on separateandreturnnames 01 use array methods":["Hi all,  I was hoping someone could take a look at what I have written for this problem. I'm stuck. Any tips would be appreciated!  const separateAndReturnNames = (superheroesArr, firstOrLast, maxLengthOfName) =&gt; {           let fullName = superhero.name;         let fullNameArr = fullName.split(' ');         let firstName = fullNameArr[0];         let lastName = fullNameArr[1];         superhero.firstName = firstName;         superhero.lastName = lastName;                  const arrOfFirstorLast = superheroesArr.map (function(superhero) {            for (let key in superhero) {                if (key === firstOrLast) {                    return superhero.key;                }            }         })          const onlyDesiredLengths = arrOfFirstorLast.filter(name =&gt; name.length &lt;= maxLengthOfName);          return onlyDesiredLengths; }","ps I realize I'm not actually method chaining here. I just wanted to break it down first since there seemed to be a lot to take care of!","I believe that if this were to be method chained, you would need to:  Assign your identifier/variables as when they are applicable and can be used.  It's a little difficult for me to get how superhero.name is part of how you move though the function because it doesn't exist yet.  There is no superhero.name OR superhero object that I can see from what you are passing in as arguments.  So if you started with mapping superheroesArr.  Then declared your variables in there, that might be more useful.  Hope that helps.  Also .map doesn't require a for loop.  It has iteration built into it already.","Thanks, @Shawn_Larkin! Those tips helped a lot. I was able to pass all but the last test with this code, following what you said about leading with the mapping and naming variables and such within that (and getting rid of the for-in loop). Even though my code accomplishes what it's meant to, it's not passing the last spec because it seems that there need to be two map calls and one filter.  This strikes me as kind of strange. Why use map twice if you can just do everything in one map call?  const separateAndReturnNames = (superheroesArr, firstOrLast, maxLengthOfName) =&gt; {                   const arrOfFirstorLast = superheroesArr.map (function(superhero) {                             let keyArray = superhero.name.split(' ');                    let firstName = keyArray[0];                    let lastName = keyArray[1];                    superhero.firstName = firstName;                    superhero.lastName = lastName;                     if (firstOrLast === 'firstName') {                        return superhero.firstName;                    }                    if (firstOrLast === 'lastName') {                        return superhero.lastName;                    }                         })          const onlyDesiredLengths = arrOfFirstorLast.filter(name =&gt; name.length &lt;= maxLengthOfName);          return onlyDesiredLengths; }","Glad you could get it moved along.  I suspect the specs and exercises is to emphasize function chaining.  If you refactor you don't have to assign variables for each method.  Instead it can be something like:  const separateAndReturnNames = (superheroesArr, firstOrLast, maxLengthOfName) =&gt; {{   return superheroesArr.map().map().filter(); });  Cheers,Shawn"],"map return values":["I just finished working through all of the problems in 06-Functional-Programming and one thing is tripping me up in one of the problems that uses .map()  Why, in this code, is return hero necessary on line 109:  but an extra return line is not necessary in this problem:  they are both .map() methods, is the element that is being 'mapped' not implicitly returned?","Yeah, you do need it.I think its because .map is performing a function on each array element that changes that element and you have to explicitly return something from the function.  If you don't return hero you just get an array of undefined.","Hi Adam,  The map method creates a new array with the results of calling a provided function on every element in the calling array. (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)  The return hero that you see inside the map method is the return of the callback function inside the map method. It means this is returning the value for each element inside the array that the map method will return.","Hey Adam,When it follows the syntax in the inYourBudget problem, the return is implicit. So return is still necessary.  Here's an excerpt for the documentation on arrow functions.   (param1, param2, …, paramN) =&gt; expression// equivalent to: =&gt; { return expression; }  so, in the first code excerpt, even .map(hero =&gt; hero[givenName]); is equivalent to   .map(hero =&gt; {     return hero[givenName]; });","Kayla, that made it click for me! I took for granted the differences in arrow function and function declaration.Thank you everyone!","// WHY DOES THIS WORK without e =&gt; ...    console.log('numbers.map(Math.sqrt):', numbers.map(Math.sqrt));  // WHY DOES THIS NEED e =&gt; ...// is it b/c .toUpperCase is a method?// this will NOT work: // console.log(words.map(toUpperCase());// neither will this:// console.log(words.map(toUpperCase()));  var words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];  console.log('words.map(e =&gt; e.toUpperCase()):', words.map(e =&gt; e.toUpperCase()));","The reason is because toUpperCase is a method on the String prototype, so it must be called on a string.  You need e =&gt; e.toUpperCase() because e is providing a reference to each string in the array you are trying to operate on. Without a string to operate on, toUpperCase() doesn't \"exist\" so to speak. String.prototype.toUppercase itself is not the callback function passed to map, rather the callback function takes the string and executes toUpperCase on it as a method, placing the new capitalized string in the new array.  Math.sqrt works because sqrt is a method on the Math object (and not on the Number object), and it takes a number as an argument:  console.log(Math.sqrt(25)) // 5console.log(25.sqrt()) // sqrt is not a method on Number Since map passes each array element as the first argument to the callback, Math.sqrt receives a number argument and returns its square root, which will then be placed into the new array, so it works.","\"Since map passes each array element as the first argument to the callback, Math.sqrt receives a number argument and returns its square root, which will then be placed into the new array, so it works.\"  I don't understand, are you saying that:if array = an array of numbersarray.map passes each individual numberwhich is why   numbers.map(Math.sqrt)); works?  BUT if array = an array of strings2. arrray.map does NOT pass each individual string?  And that's why words.map(toUpperCase()); does not work?  I'm confused.  Why is #1 getting individual numbers and #2 not getting individual strings?  Thanks in advance.","I'm not 100% but my best guess is that Math.sqrt() is a function and can thus be passed into .map as the callback. I assume it would then just automatically pass all the arguments to sqrt by default. toUpperCase() on the other hand is a string method, so it needs to be called on that string, not have the string passed to it as an argument. You would need to write a callback that calls toUpperCase() on each element and returns that new string. For example:array.map((element) =&gt; element.toUpperCase());   Hope this helps, I could be wrong in some ways but this is my best understanding of .map from what we've learned so far!","Array.prototype.map DOES pass each individual string to the callback, but String.prototype.toUpperCase() does not take a string argument; in fact, it doesn't take ANY arguments, so it won't work as the callback by itself.  Using Math.sqrt() as the callback, someArray.map(Math.sqrt) is equivalent to someArray.map( e =&gt; Math.sqrt(e)). Math.sqrt takes a number argument and returns the square root of the argument. Since we're passing a number from the original array as an argument and we want the square root returned to the new array being created, Math.sqrt itself can be used as the callback. It fits the pattern we're looking for in our callback.  However, String.prototype.toUpperCase() does NOT take any arguments, so it can't accept the string as an argument, so passing it a string doesn't do anything (except throw an error). It acts on the string for which it is being called as a method. So rather than toUpperCase(string), it must be used like this: string.toUpperCase()  So in our map method, we pass our string into our callback method as an argument, and in the callback method's body we access the string's toUpperCase method using dot notation on the string itself, and return it:  arrayOfStrings.map(e =&gt; e.toUpperCase())  I hope that helps, feel free to reach out if you're still confused ^_^.","THANK YOU now I understand"],"06 superheroes array to object":["Hi everyone,  I am having a difficult time with this. Maybe I am not understanding the test specs. I keep getting the error that my 'superheroesArray' is not a function. You can see my code below for reference.  Code  const keyifyArrayOfObjects = (superheroesArray) =&gt; {  let superheroesObject = superheroesArray.reduce(function(obj, superhero) {     obj[superhero.alias] = superhero;     return obj; }, {});  return superheroesObject;  };",".reduce() is kind of special in that it always takes a function of the form: function(accum, current). The accum and current arguments are automatically supplied to the function. The only optional argument you can pass to the reducer function is an initialValue.  You may want to use an additional array method before reducing.","Hi! I was having a lot of trouble with this one too. One thing I noticed after quite awhile was that the superherosObject is created in the test specs by passing two arguments to keyifyArrayOfObjects-- so keyifyArrayOfObjects must have two parameters!   From test specs: \"const superheroesObject = keyifyArrayOfObjects('alias', superheroes);\"  Hope this helps!","@Sarah_Roach This was exactly it! Wow... Thank you both!","CODE SPOILER ALERT:  Can someone please explain what this line is doing in the solution?  accum[currentHero[string]] = currentHero;  What is accum[ ] ?  Thank you!","Hey Josh,So they set the initial value to an object literal, (aka {} is the last thing passed to .reduce) because the description of the spec was   superheroesObject refactors the superheroes array to an object with the alias as the property and the value is the object that has that alias  So accum can be seen as the \"accumulator object.\" It refers to the current version of the object  the .reduce method will return. It starts off as just being an empty object, since we passed an initial value of {} to .reduce.  So then accum[currentHero[string]] = is just bracket notation to access/set a property of an object.  Finally, string is the alias (or some property of a superhero), and the superhero's value for that alias (or property), becomes the new key in the object returned from .reduce, and the superhero itself is the new value","So after that line of code each key is the name and each value is the here object itself.  [currentHero[string]] is Batmanaccum[Batam] = Batman Object  accum is the new object{ Batman: {Batman Object }}  The nested bracket notation threw me.  Thank you!","Can this problem be accomplished with .map?"],"06 functional use array methods separateandreturnnames":["I'm wondering  1) Where I can read more about how this is working. I understand it but I didn't know I could do this:            const [firstName, lastName] = elem.name.split(' ');  2) When can I use var.property vs. var[property]?This works:    .filter(current =&gt; current[property].length &lt;= num)but this doesn't:    .filter(current =&gt; current.property.length &lt;= num)  Can anyone help me out on this? Thank you!","The first thing looks like destructuring, but I don't remember enough to be sure.  The second has to do with the difference between bracket notation and dot notation. Dot notation will take whatever you write after the dot as the actual string key of the property you're trying to access. In other words, current.property will look for a key on the current object that is equal to the string 'property.'  const obj = {   property: 'Hello' }  obj.property // 'Hello'  Bracket notation, however, allows you to use a variable or an expression to evaluate as the key.  const property = 'myProperty';  const obj = {   myProperty: 'Hello' }  obj[property] // Hello  Hope that helps!","Here's documentation to answer your first question. This link will lead you right to the topic of Array destructuring:          developer.mozilla.org             Destructuring assignment  The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables."],"question about getpopulation function in 06 functional programming problem sets":["I worked through this problem, passed every test spec except for the last one which I found to be a bit odd. I haven't looked at the solutions yet because I just wanted some clarity from the group first.  Okay so the test specs say \"using reduce, getPopulation adds the population of all the countries included in the SECOND argument array\"  In this screenshot you can see that the second argument array is empty. So shouldn't the total be zero?Technically, it shouldn't be totaling up ALL of the populations per the instructions.Maybe, I'm misunderstanding. Anyone else notice this?   Screen Shot 2018-10-02 at 7.24.33 PM.png849x290 59.2 KB","Hey Tatiana, It's a weird spec. But after looking at how many digits there are, I figured the number was big enough to actually be the sum of all the populations. So that's what that spec is.","I agree; I had the same initial reaction as you did and thought it was a bit strange myself as well.  If this were part of a larger project, one possible explanation is that passing an empty array would function as a shortcut to getting the population of every country available. This way, the user could avoid the tedious work of adding the name of every single country to a second argument array if they wanted to get the total population of all countries. In theory, if a user wanted to get the total population of zero countries, they would never bother passing an empty array as the second argument because they could safely assume that that result would be zero.","Thanks Kayla, I assumed that was the case...but I also wasn't sure if it was a typo. Thanks!","This perspective makes total sense. So I have to go back and refactor my code to account for this. Thanks!","According to the MDN help for Array.reduce() (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce), the second argument is the initial value reduce should start accumulating from. That means if you're summing it might be 0, or if you are comparing it might be plus or minus Infinity. If the second argument is omitted, the function starts accumulating from the first element of the array it is attached to (called on).","Thanks for your input Kimberly!","Hi everyone,  I actually can't get through this problem myself. My issue looks similar to Tatiana's but I can't seem to make any sense of it. Was wondering if anyone can just take a look at my code and possibly let me know what I am doing wrong?   My code and test specs are here: Summary   getPopulationTests.png837x894 121 KB","I would take a look at the callback function passed to reduce(). As this function is being called on each element of total, what is being returned with each iteration?","Thank you! I manged to figure it out."]}